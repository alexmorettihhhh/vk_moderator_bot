import time
from collections import defaultdict
from datetime import datetime, timedelta
from logger import log_error, log_moderation
import sqlite3
import re

class AntiSpam:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_messages = defaultdict(list)
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_warnings = defaultdict(int)
        # –ö—ç—à —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.role_cache = {}
        # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.cache_lifetime = 300  # 5 –º–∏–Ω—É—Ç
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        self.settings = {
            'message_interval': 1.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            'max_messages': 5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
            'check_period': 10,  # –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            'max_warnings': 3,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—É—Ç–∞
            'mute_duration': 300,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            'max_similar_messages': 3,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            'similarity_threshold': 0.85,  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç 0 –¥–æ 1)
            'max_caps_percentage': 70,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
            'max_links_per_message': 2,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            'max_message_length': 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
        self.url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        self.invite_link_pattern = re.compile(r'vk\.com/join|vk\.me/join|vk\.cc/')

    def get_user_role(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in self.role_cache:
            cached_role, cache_time = self.role_cache[user_id]
            if current_time - cache_time < self.cache_lifetime:
                return cached_role
        
        try:
            conn = sqlite3.connect('bot.db')
            c = conn.cursor()
            c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
            result = c.fetchone()
            role = result[0] if result else 'user'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.role_cache[user_id] = (role, current_time)
            
            conn.close()
            return role
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            return 'user'

    def clean_old_messages(self, user_id):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        self.user_messages[user_id] = [
            msg for msg in self.user_messages[user_id]
            if current_time - msg['time'] <= self.settings['check_period']
        ]

    def calculate_similarity(self, text1, text2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
        from difflib import SequenceMatcher
        return SequenceMatcher(None, text1.lower(), text2.lower()).ratio()

    def check_message_content(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—Å
        if len(message) > 10:
            caps_count = sum(1 for c in message if c.isupper())
            if caps_count / len(message) * 100 > self.settings['max_caps_percentage']:
                return True, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > self.settings['max_message_length']:
            return True, "—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
        urls = self.url_pattern.findall(message)
        if len(urls) > self.settings['max_links_per_message']:
            return True, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
        if self.invite_link_pattern.search(message):
            return True, "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞"

        return False, None

    def is_message_spam(self, user_id, message_text):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_spam, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = self.get_user_role(user_id)
        if user_role in ['moderator', 'senior_moderator', 'admin']:
            return False, None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_spam, reason = self.check_message_content(message_text)
        if is_spam:
            return True, reason

        current_time = time.time()
        self.clean_old_messages(user_id)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.user_messages[user_id].append({
            'text': message_text,
            'time': current_time
        })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.user_messages[user_id]) > 1:
            last_msg_time = self.user_messages[user_id][-2]['time']
            if current_time - last_msg_time < self.settings['message_interval']:
                return True, "—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        if len(self.user_messages[user_id]) > self.settings['max_messages']:
            return True, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        similar_count = 1
        for old_msg in reversed(self.user_messages[user_id][:-1]):
            if self.calculate_similarity(message_text, old_msg['text']) >= self.settings['similarity_threshold']:
                similar_count += 1
                if similar_count > self.settings['max_similar_messages']:
                    return True, "–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è"

        return False, None

    def handle_spam(self, vk, chat_id, user_id, reason):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        user_role = self.get_user_role(user_id)
        if user_role in ['moderator', 'senior_moderator', 'admin']:
            return None

        self.user_warnings[user_id] += 1
        warning_count = self.user_warnings[user_id]

        try:
            conn = sqlite3.connect('bot.db')
            c = conn.cursor()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            c.execute('''INSERT INTO warn_history (user_id, warned_by, reason, timestamp)
                        VALUES (?, ?, ?, ?)''', 
                        (user_id, 0, f"–ê–Ω—Ç–∏—Å–ø–∞–º: {reason}", datetime.now()))
            
            if warning_count >= self.settings['max_warnings']:
                # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º—É—Ç–µ
                    mute_end = datetime.now() + timedelta(seconds=self.settings['mute_duration'])
                    c.execute('''UPDATE users 
                                SET is_muted = 1, mute_end = ? 
                                WHERE user_id = ?''', (mute_end, user_id))
                    
                    vk.messages.removeChatUser(chat_id=chat_id, user_id=user_id)
                    log_moderation('ANTISPAM', 'MUTE', user_id, f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –∑–∞ —Å–ø–∞–º: {reason}")
                    
                    conn.commit()
                    conn.close()
                    
                    return f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {self.settings['mute_duration'] // 60} –º–∏–Ω—É—Ç –∑–∞ —Å–ø–∞–º ({reason})"
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    return None
            else:
                conn.commit()
                conn.close()
                # –í—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                return f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∞–º ({reason}). {warning_count}/{self.settings['max_warnings']}"
                
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞: {str(e)}")
            if conn:
                conn.close()
            return None

    def reset_warnings(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_warnings:
            del self.user_warnings[user_id]
        
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Ä–æ–ª–µ–π"""
        current_time = time.time()
        self.role_cache = {
            user_id: (role, cache_time)
            for user_id, (role, cache_time) in self.role_cache.items()
            if current_time - cache_time < self.cache_lifetime
        }

    def update_settings(self, new_settings):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
        self.settings.update(new_settings)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω—Ç–∏—Å–ø–∞–º–∞
antispam = AntiSpam() 