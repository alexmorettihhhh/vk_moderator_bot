import sqlite3
from datetime import datetime, timedelta
import random
from vk_api.utils import get_random_id
from utils import extract_user_id
import json
from logger import log_error

def update_user_stats(conn, user_id, win_amount):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        c = conn.cursor()
        with conn:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if win_amount > 0:
                c.execute('''UPDATE users 
                            SET games_won = games_won + 1,
                                total_winnings = total_winnings + ?,
                                biggest_win = CASE 
                                    WHEN ? > biggest_win THEN ?
                                    ELSE biggest_win
                                END
                            WHERE user_id = ?''', 
                         (win_amount, win_amount, win_amount, user_id))
            else:
                c.execute('''UPDATE users 
                            SET games_lost = games_lost + 1,
                                total_losses = total_losses + ?
                            WHERE user_id = ?''', 
                         (abs(win_amount), user_id))
    except sqlite3.Error as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)
        raise

def check_achievement(conn, user_id, win_amount, game_type=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–≥—Ä—ã"""
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('''SELECT total_winnings, games_won, games_lost, 
                 jackpot_wins, poker_wins, biggest_win,
                 (SELECT COUNT(*) FROM tournament_history 
                  WHERE user_id = ? AND place = 1) as tournament_wins
                 FROM users WHERE user_id = ?''', (user_id, user_id))
    result = c.fetchone()
    if not result:
        return []
    
    total_winnings, games_won, games_lost, jackpot_wins, poker_wins, biggest_win, tournament_wins = result
    
    achievements = []
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if total_winnings >= 1000000:
        achievements.append('üé∞ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä')
    if win_amount >= 100000:
        achievements.append('üíé –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à')
    if games_won >= 100:
        achievements.append('üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫')
    if total_winnings >= 5000000:
        achievements.append('üëë –õ–µ–≥–µ–Ω–¥–∞ –∫–∞–∑–∏–Ω–æ')
    if win_amount >= 500000:
        achievements.append('üåü –î–∂–µ–∫–ø–æ—Ç')
    if games_won + games_lost >= 1000:
        achievements.append('üé≤ –ó–∞—è–¥–ª—ã–π –∏–≥—Ä–æ–∫')
    if poker_wins >= 50:
        achievements.append('‚ô†Ô∏è –ü–æ–∫–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏')
    if jackpot_wins >= 3:
        achievements.append('üí∞ –í–µ–∑—É–Ω—á–∏–∫')
    if tournament_wins >= 5:
        achievements.append('üèÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ–µ—Ü')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
    for achievement in achievements:
        c.execute('''INSERT OR IGNORE INTO achievements 
                    (user_id, achievement_type, achievement_date)
                    VALUES (?, ?, ?)''', (user_id, achievement, datetime.now()))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if win_amount >= 100000:
        c.execute('''INSERT INTO jackpot_history 
                    (user_id, amount, timestamp, game_type)
                    VALUES (?, ?, ?, ?)''', 
                    (user_id, win_amount, datetime.now(), game_type))
    
    return achievements

def cmd_slots(vk, event, args):
    """–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
    
    try:
        bet = int(args[0])
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
        symbols = ['üçé', 'üçã', 'üçí', '7Ô∏è‚É£', 'üíé', 'üé∞']
        weights = [0.35, 0.25, 0.20, 0.10, 0.07, 0.03]
        
        # –ö—Ä—É—Ç–∏–º —Å–ª–æ—Ç—ã
        result = random.choices(symbols, weights=weights, k=3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if result[0] == result[1] == result[2]:
            multiplier = {
                'üçé': 2,
                'üçã': 3,
                'üçí': 5,
                '7Ô∏è‚É£': 10,
                'üíé': 20,
                'üé∞': 50
            }[result[0]]
            win = bet * multiplier
            message = f"üé∞ {' '.join(result)}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x{multiplier})"
        elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
            # –í—ã–∏–≥—Ä—ã—à –∑–∞ –¥–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            win = bet
            message = f"üé∞ {' '.join(result)}\nüí∞ –ú–∞–ª–µ–Ω—å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç"
        else:
            win = -bet
            message = f"üé∞ {' '.join(result)}\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win, user_id))
        update_user_stats(conn, user_id, win)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = check_achievement(conn, user_id, win)
        if achievements:
            message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def cmd_dice(vk, event, args):
    """–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º"""
    if len(args) < 2:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dice [ID] [—Å—Ç–∞–≤–∫–∞]"
    
    try:
        user_id = event.obj.message['from_id']
        target = args[0]
        bet = int(args[1])
        
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_id = extract_user_id(vk, target)
        if not opponent_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if user_id == opponent_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        c.execute('SELECT user_id, balance FROM users WHERE user_id IN (?, ?)', (user_id, opponent_id))
        balances = {row[0]: row[1] for row in c.fetchall()}
        
        if user_id not in balances:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ"
        if opponent_id not in balances:
            opponent_info = vk.users.get(user_ids=[opponent_id])[0]
            return f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{opponent_id} ({opponent_info['first_name']}) –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ"
        
        if balances[user_id] < bet:
            return f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–Ω—É–∂–Ω–æ {bet}, –∞ —É –≤–∞—Å {balances[user_id]})"
        if balances[opponent_id] < bet:
            opponent_info = vk.users.get(user_ids=[opponent_id])[0]
            return f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{opponent_id} ({opponent_info['first_name']}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–Ω—É–∂–Ω–æ {bet}, –∞ —É –Ω–µ–≥–æ {balances[opponent_id]})"
        
        # –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
        user_roll = random.randint(1, 6)
        opponent_roll = random.randint(1, 6)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if user_roll > opponent_roll:
            winner_id = user_id
            loser_id = opponent_id
        elif opponent_roll > user_roll:
            winner_id = opponent_id
            loser_id = user_id
        else:
            return "üé≤ –ù–∏—á—å—è! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã–±—Ä–æ—Å–∏–ª–∏ " + str(user_roll)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (bet, winner_id))
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (bet, loser_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute('UPDATE users SET games_won = games_won + 1 WHERE user_id = ?', (winner_id,))
        c.execute('UPDATE users SET games_lost = games_lost + 1 WHERE user_id = ?', (loser_id,))
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users_info = vk.users.get(user_ids=[user_id, opponent_id])
        user_name = users_info[0]['first_name']
        opponent_name = users_info[1]['first_name']
        
        return (f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏:\n"
                f"@id{user_id} ({user_name}): {user_roll}\n"
                f"@id{opponent_id} ({opponent_name}): {opponent_roll}\n\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @id{winner_id} (+{bet} –º–æ–Ω–µ—Ç)")
                
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    

def cmd_russian_roulette(vk, event, args):
    """–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
    
    try:
        bet = int(args[0])
        user_id = event.obj.message['from_id']
        
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
        bullet = random.randint(1, 6)
        trigger = random.randint(1, 6)
        
        if bullet == trigger:
            win = -bet
            message = f"üî´ *–í—ã—Å—Ç—Ä–µ–ª* üíÄ\nüí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {bet} –º–æ–Ω–µ—Ç"
        else:
            win = bet * 5  # –ï—Å–ª–∏ –≤—ã–∂–∏–ª–∏, –ø–æ–ª—É—á–∞–µ–º 5x —Å—Ç–∞–≤–∫—É
            message = f"üî´ *–©–µ–ª—á–æ–∫* ‚úÖ\nüí∞ –í—ã –≤—ã–∂–∏–ª–∏! –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win, user_id))
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    


def cmd_blackjack(vk, event, args):
    """–ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫"""
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blackjack [—Å—Ç–∞–≤–∫–∞] [–¥–µ–π—Å—Ç–≤–∏–µ: hit/stand]"
    
    try:
        bet = int(args[0])
        action = args[1].lower() if len(args) > 1 else 'start'
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        validate_bet(bet, min_bet=50, max_bet=100000)
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            can_play, limit_msg = check_game_limits(conn, user_id, 'blackjack')
            if not can_play:
                return limit_msg
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            is_safe, suspicious_msg = check_suspicious_activity(conn, user_id)
            if not is_safe:
                return suspicious_msg
            
            c = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
            balance = c.fetchone()
            
            if not balance or balance[0] < bet:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
            
            def calculate_hand_value(cards):
                """–ü–æ–¥—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç—É–∑–æ–≤"""
                value = 0
                aces = 0
                for card in cards:
                    if card == 11:  # –¢—É–∑
                        aces += 1
                        value += 11
                    else:
                        value += card
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã –∫–∞–∫ 1, –µ—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 21
                while value > 21 and aces > 0:
                    value -= 10
                    aces -= 1
                
                return value
            
            if action == 'start':
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                user_cards = [random.randint(1, 11), random.randint(1, 11)]
                dealer_cards = [random.randint(1, 11)]
                
                game_state = {
                    'user_cards': user_cards,
                    'dealer_cards': dealer_cards,
                    'bet': bet,
                    'timestamp': datetime.now().isoformat()
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                c.execute("""INSERT INTO game_states (user_id, game_type, state, timestamp)
                           VALUES (?, 'blackjack', ?, ?)""",
                           (user_id, json.dumps(game_state), datetime.now()))
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
                c.execute("""INSERT INTO game_history (user_id, game_type, amount, timestamp)
                           VALUES (?, 'blackjack', ?, ?)""",
                           (user_id, bet, datetime.now()))
                
                user_value = calculate_hand_value(user_cards)
                return f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards} (—Å—É–º–º–∞: {user_value})\n" \
                       f"üé¥ –ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_cards[0]}\n" \
                       f"–î–µ–π—Å—Ç–≤–∏–µ? (hit/stand)"
            
            elif action in ['hit', 'stand']:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                c.execute("""SELECT state FROM game_states 
                           WHERE user_id = ? AND game_type = 'blackjack'
                           ORDER BY timestamp DESC LIMIT 1""", (user_id,))
                saved_state = c.fetchone()
                
                if not saved_state:
                    return "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É: /blackjack [—Å—Ç–∞–≤–∫–∞]"
                
                try:
                    game_state = json.loads(saved_state[0])
                    user_cards = game_state['user_cards']
                    dealer_cards = game_state['dealer_cards']
                    bet = game_state['bet']
                except (json.JSONDecodeError, KeyError) as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: {str(e)}", exc_info=True)
                    return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é: /blackjack [—Å—Ç–∞–≤–∫–∞]"
                
                if action == 'hit':
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
                    new_card = random.randint(1, 11)
                    user_cards.append(new_card)
                    user_value = calculate_hand_value(user_cards)
                    
                    if user_value > 21:
                        # –ü—Ä–æ–∏–≥—Ä—ã—à
                        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?',
                                (bet, user_id))
                        c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                                (user_id, 'blackjack'))
                        
                        update_user_stats(conn, user_id, -bet)
                        conn.commit()
                        
                        return f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards} (—Å—É–º–º–∞: {user_value})\n" \
                               f"üíÄ –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç"
                    
                    game_state['user_cards'] = user_cards
                    c.execute("""UPDATE game_states 
                               SET state = ?, timestamp = ?
                               WHERE user_id = ? AND game_type = 'blackjack'""",
                               (json.dumps(game_state), datetime.now(), user_id))
                    
                    return f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards} (—Å—É–º–º–∞: {user_value})\n" \
                           f"üé¥ –ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_cards[0]}\n" \
                           f"–î–µ–π—Å—Ç–≤–∏–µ? (hit/stand)"
                
                elif action == 'stand':
                    # –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä—É
                    dealer_value = calculate_hand_value(dealer_cards)
                    while dealer_value < 17:
                        dealer_cards.append(random.randint(1, 11))
                        dealer_value = calculate_hand_value(dealer_cards)
                    
                    user_value = calculate_hand_value(user_cards)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    if dealer_value > 21 or user_value > dealer_value:
                        win = bet
                        result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                    elif user_value < dealer_value:
                        win = -bet
                        result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
                    else:
                        win = 0
                        result = "ü§ù –ù–∏—á—å—è!"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                            (win, user_id))
                    
                    if win != 0:
                        update_user_stats(conn, user_id, win)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        achievements = check_achievement(conn, user_id, win, 'blackjack')
                        if achievements:
                            result += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                    c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                            (user_id, 'blackjack'))
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
                    c.execute("""INSERT INTO game_history (user_id, game_type, amount, timestamp)
                               VALUES (?, 'blackjack', ?, ?)""",
                               (user_id, win, datetime.now()))
                    
                    conn.commit()
                    
                    return f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards} (—Å—É–º–º–∞: {user_value})\n" \
                           f"üé¥ –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_cards} (—Å—É–º–º–∞: {dealer_value})\n" \
                           f"{result}"
            
            else:
                return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: hit –∏–ª–∏ stand"
                
        finally:
            conn.close()
            
    except ValueError as e:
        return f"‚ö†Ô∏è {str(e)}"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ blackjack: {str(e)}", exc_info=True)
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

def cmd_duel(vk, event, args):
    """–î—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏"""
    if len(args) < 2:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /duel [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç–∞–≤–∫–∞]"
    
    try:
        target = args[0]
        bet = int(args[1])
        user_id = event.obj.message['from_id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        opponent_id = extract_user_id(vk, target)
        if not opponent_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        if user_id == opponent_id:
            return "‚ùå –ù–µ–ª—å–∑—è –¥—Ä–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        c.execute('SELECT balance FROM users WHERE user_id IN (?, ?)',
                 (user_id, opponent_id))
        balances = c.fetchall()
        
        if len(balances) != 2 or any(b[0] < bet for b in balances):
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_id = random.choice([user_id, opponent_id])
        loser_id = opponent_id if winner_id == user_id else user_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (bet, winner_id))
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?',
                 (bet, loser_id))
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users_info = vk.users.get(user_ids=[winner_id, loser_id])
        winner_info = next(u for u in users_info if u['id'] == winner_id)
        loser_info = next(u for u in users_info if u['id'] == loser_id)
        
        return (f"‚öîÔ∏è –î—É—ç–ª—å!\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @id{winner_id} ({winner_info['first_name']})\n"
                f"üò¢ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @id{loser_id} ({loser_info['first_name']})\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç")
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_wheel(vk, event, args):
    """–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏ —Ü–≤–µ—Ç (red/black/green)"
    
    try:
        bet = int(args[0])
        color = args[1].lower() if len(args) > 1 else None
        
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        if color not in ['red', 'black', 'green']:
            return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç: red, black –∏–ª–∏ green"
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = random.choices(['red', 'black', 'green'], weights=[0.45, 0.45, 0.1])[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if result == color:
            multiplier = 14 if color == 'green' else 2
            win = bet * multiplier
            message = f"üé° –í—ã–ø–∞–ª–æ: {result}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x{multiplier})"
        else:
            win = -bet
            message = f"üé° –í—ã–ø–∞–ª–æ: {result}\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win, user_id))
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_flip(vk, event, args):
    """–ò–≥—Ä–∞ –≤ –º–æ–Ω–µ—Ç–∫—É"""
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /flip [—Å—É–º–º–∞] [–æ—Ä–µ–ª/—Ä–µ—à–∫–∞]"
    
    try:
        user_id = event.obj.message['from_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(args) < 2:
            return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã (–æ—Ä–µ–ª/—Ä–µ—à–∫–∞)"
            
        bet = int(args[0])
        choice = args[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã
        if choice not in ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞']:
            return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ: –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
        if not validate_bet(bet):
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: 1,000,000"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if not result:
            conn.close()
            return "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ"
            
        balance = result[0]
        
        if balance < bet:
            conn.close()
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}"
        
        # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É
        flip_result = '–æ—Ä–µ–ª' if random.random() < 0.5 else '—Ä–µ—à–∫–∞'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        won = choice == flip_result
        win_amount = bet if won else -bet
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win_amount, user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if won:
            update_user_stats(conn, user_id, win_amount)
            check_achievement(conn, user_id, win_amount, 'flip')
        
        conn.commit()
        conn.close()
        
        result_emoji = 'ü¶Ö' if flip_result == '–æ—Ä–µ–ª' else 'üëë'
        result_message = (f"{result_emoji} –í—ã–ø–∞–ª {flip_result}!\n"
                         f"{'‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏' if won else '‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'} {abs(win_amount)} –º–æ–Ω–µ—Ç!")
        
        return result_message
    except ValueError:
        return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_lottery(vk, event, args):
    """–õ–æ—Ç–µ—Ä–µ—è —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º –¥–∂–µ–∫–ø–æ—Ç–æ–º"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ (1-10)"
    
    try:
        tickets = int(args[0])
        if tickets < 1 or tickets > 10:
            return "‚ö†Ô∏è –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç 1 –¥–æ 10 –±–∏–ª–µ—Ç–æ–≤"
        
        ticket_price = 100  # –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
        total_cost = tickets * ticket_price
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < total_cost:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∂–µ–∫–ø–æ—Ç
        c.execute('SELECT value FROM settings WHERE key = "lottery_jackpot"')
        jackpot = c.fetchone()
        if not jackpot:
            c.execute('INSERT INTO settings (key, value) VALUES ("lottery_jackpot", "1000")')
            jackpot = 1000
        else:
            jackpot = int(jackpot[0])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —á–∏—Å–ª–∞
        win_numbers = []
        total_win = 0
        
        for _ in range(tickets):
            number = random.randint(1, 100)
            if number <= 5:  # 5% —à–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç
                total_win += jackpot
                win_numbers.append(f"üíé {number} (–î–∂–µ–∫–ø–æ—Ç!)")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∂–µ–∫–ø–æ—Ç
                c.execute('UPDATE settings SET value = "1000" WHERE key = "lottery_jackpot"')
            elif number <= 20:  # 15% —à–∞–Ω—Å –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
                win = ticket_price * 3
                total_win += win
                win_numbers.append(f"üåü {number} ({win} –º–æ–Ω–µ—Ç)")
            elif number <= 50:  # 30% —à–∞–Ω—Å –Ω–∞ –º–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à
                win = ticket_price
                total_win += win
                win_numbers.append(f"‚≠ê {number} ({win} –º–æ–Ω–µ—Ç)")
            else:
                win_numbers.append(f"‚ùå {number}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∂–µ–∫–ø–æ—Ç
        c.execute('UPDATE users SET balance = balance - ? + ? WHERE user_id = ?',
                 (total_cost, total_win, user_id))
        if total_win == 0:
            c.execute('UPDATE settings SET value = value + ? WHERE key = "lottery_jackpot"',
                     (int(total_cost * 0.5),))  # 50% –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∏–¥–µ—Ç –≤ –¥–∂–µ–∫–ø–æ—Ç
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏:\n"
        message += "\n".join(win_numbers)
        if total_win > 0:
            message += f"\n\nüí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_win} –º–æ–Ω–µ—Ç"
        else:
            message += f"\n\nüí∏ –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_cost} –º–æ–Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_user_stats(conn, user_id, total_win - total_cost)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = check_achievement(conn, user_id, total_win)
        if achievements:
            message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_numbers(vk, event, args):
    """–ò–≥—Ä–∞ –≤ —á–∏—Å–ª–∞: —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100"""
    if len(args) < 2:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /numbers [—á–∏—Å–ª–æ] [—Å—Ç–∞–≤–∫–∞]"
    
    try:
        number = int(args[0])
        bet = int(args[1])
        
        if number < 1 or number > 100:
            return "‚ö†Ô∏è –ó–∞–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100"
        if bet < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞"
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ
        target = random.randint(1, 100)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if number == target:
            win = bet * 50  # –¢–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            message = f"üéØ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {target}!\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x50)"
        elif abs(number - target) <= 5:
            win = bet * 5  # –ë–ª–∏–∑–∫–æ–µ —á–∏—Å–ª–æ (¬±5)
            message = f"üéØ –ü–æ—á—Ç–∏! –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ {target}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x5)"
        elif abs(number - target) <= 10:
            win = bet * 2  # –ë–ª–∏–∑–∫–æ–µ —á–∏—Å–ª–æ (¬±10)
            message = f"üéØ –ù–µ–ø–ª–æ—Ö–æ! –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ {target}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x2)"
        else:
            win = -bet
            message = f"üéØ –ù–µ —É–≥–∞–¥–∞–ª–∏! –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ {target}\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win, user_id))
        update_user_stats(conn, user_id, win)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = check_achievement(conn, user_id, win)
        if achievements:
            message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_jackpot(vk, event, args):
    """–ò–≥—Ä–∞ Jackpot - –æ–±—â–∏–π –±–∞–Ω–∫, –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
    
    try:
        bet = int(args[0])
        if bet < 100:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –º–æ–Ω–µ—Ç"
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫
        c.execute('SELECT value FROM settings WHERE key = "jackpot_bank"')
        current_bank = c.fetchone()
        if not current_bank:
            c.execute('INSERT INTO settings (key, value) VALUES ("jackpot_bank", "0")')
            current_bank = 0
        else:
            current_bank = int(current_bank[0])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–Ω–∫
        new_bank = current_bank + bet
        c.execute('UPDATE settings SET value = ? WHERE key = "jackpot_bank"', (str(new_bank),))
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (bet, user_id))
        
        # –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏
        win_chance = bet / new_bank
        
        if random.random() < win_chance:
            # –ü–æ–±–µ–¥–∞
            c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (new_bank, user_id))
            c.execute('UPDATE settings SET value = "0" WHERE key = "jackpot_bank"')
            message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ—Ä–≤–∞–ª–∏ –¥–∂–µ–∫–ø–æ—Ç!\nüí∞ –í—ã–∏–≥—Ä—ã—à: {new_bank} –º–æ–Ω–µ—Ç"
            update_user_stats(conn, user_id, new_bank)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = check_achievement(conn, user_id, new_bank)
            if achievements:
                message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        else:
            message = f"üò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ!\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {new_bank} –º–æ–Ω–µ—Ç\nüé≤ –í–∞—à —à–∞–Ω—Å –±—ã–ª: {win_chance*100:.1f}%"
            update_user_stats(conn, user_id, -bet)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_poker(vk, event, args):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∫–µ—Ä–∞"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
    
    try:
        bet = int(args[0])
        if bet < 50:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 50 –º–æ–Ω–µ—Ç"
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –ö–∞—Ä—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
        cards = ['2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üáØ', 'üá∂', 'üá∞', 'üá¶']
        suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        player_cards = []
        dealer_cards = []
        deck = [(card, suit) for card in cards for suit in suits]
        random.shuffle(deck)
        
        for _ in range(5):
            player_cards.append(deck.pop())
            dealer_cards.append(deck.pop())
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        def evaluate_hand(hand):
            values = [cards.index(card[0]) for card in hand]
            suits_in_hand = [card[1] for card in hand]
            
            # –§–ª–µ—à
            flush = len(set(suits_in_hand)) == 1
            
            # –°—Ç—Ä–∏—Ç
            values.sort()
            straight = all(values[i+1] - values[i] == 1 for i in range(len(values)-1))
            
            # –ü–∞—Ä—ã –∏ —Å–µ—Ç—ã
            value_counts = {values.count(v): v for v in set(values)}
            
            if flush and straight:
                return 8, max(values)  # –°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à
            elif 4 in value_counts:
                return 7, value_counts[4]  # –ö–∞—Ä–µ
            elif 3 in value_counts and 2 in value_counts:
                return 6, value_counts[3]  # –§—É–ª–ª-—Ö–∞—É—Å
            elif flush:
                return 5, max(values)  # –§–ª–µ—à
            elif straight:
                return 4, max(values)  # –°—Ç—Ä–∏—Ç
            elif 3 in value_counts:
                return 3, value_counts[3]  # –¢—Ä–æ–π–∫–∞
            elif list(value_counts.keys()).count(2) == 2:
                return 2, max(v for k, v in value_counts.items() if k == 2)  # –î–≤–µ –ø–∞—Ä—ã
            elif 2 in value_counts:
                return 1, value_counts[2]  # –ü–∞—Ä–∞
            else:
                return 0, max(values)  # –°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞
        
        player_score = evaluate_hand(player_cards)
        dealer_score = evaluate_hand(dealer_cards)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        def format_cards(cards):
            return ' '.join(f"{card[0]}{card[1]}" for card in cards)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if player_score > dealer_score:
            win = bet * 2
            result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        elif player_score < dealer_score:
            win = -bet
            result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        else:
            win = 0
            result = "ü§ù –ù–∏—á—å—è!"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (win, user_id))
        update_user_stats(conn, user_id, win)
        
        message = (f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_cards(player_cards)}\n"
                  f"üé¥ –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_cards(dealer_cards)}\n"
                  f"{result}")
        
        if win != 0:
            achievements = check_achievement(conn, user_id, win)
            if achievements:
                message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_tournament(vk, event):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –∏–≥—Ä–∞–º"""
    try:
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ç—É—Ä–Ω–∏—Ä
        c.execute('SELECT value FROM settings WHERE key = "tournament_end"')
        tournament_end = c.fetchone()
        
        current_time = datetime.now()
        
        if not tournament_end:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
            tournament_end = current_time + timedelta(days=1)
            c.execute('INSERT INTO settings (key, value) VALUES ("tournament_end", ?)',
                     (tournament_end.strftime('%Y-%m-%d %H:%M:%S'),))
            c.execute('DELETE FROM settings WHERE key = "tournament_players"')
            message = "üéÆ –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä!\n"
        else:
            tournament_end = datetime.strptime(tournament_end[0], '%Y-%m-%d %H:%M:%S')
            if current_time > tournament_end:
                # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Ç—É—Ä–Ω–∏—Ä–∞
                c.execute('SELECT value FROM settings WHERE key = "tournament_players"')
                players = c.fetchone()
                if players:
                    players = eval(players[0])  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Å–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à—É
                    sorted_players = sorted(players.items(), key=lambda x: x[1], reverse=True)
                    
                    # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
                    rewards = {0: 10000, 1: 5000, 2: 2500}  # –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–µ—Å—Ç–∞
                    message = "üèÜ –ò—Ç–æ–≥–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
                    
                    for i, (player_id, score) in enumerate(sorted_players[:3]):
                        reward = rewards.get(i, 0)
                        if reward:
                            c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                                    (reward, int(player_id)))
                            user_info = vk.users.get(user_ids=[player_id])[0]
                            message += f"{i+1}. @id{player_id} ({user_info['first_name']})"
                            message += f" ‚Äî {score} –æ—á–∫–æ–≤, –Ω–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç\n"
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
                    tournament_end = current_time + timedelta(days=1)
                    c.execute('UPDATE settings SET value = ? WHERE key = "tournament_end"',
                             (tournament_end.strftime('%Y-%m-%d %H:%M:%S'),))
                    c.execute('DELETE FROM settings WHERE key = "tournament_players"')
                else:
                    message = "üò¢ –í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª\n"
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
                c.execute('SELECT value FROM settings WHERE key = "tournament_players"')
                players = c.fetchone()
                players = eval(players[0]) if players else {}
                
                message = "üéÆ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
                sorted_players = sorted(players.items(), key=lambda x: x[1], reverse=True)
                
                for i, (player_id, score) in enumerate(sorted_players[:5]):
                    user_info = vk.users.get(user_ids=[player_id])[0]
                    message += f"{i+1}. @id{player_id} ({user_info['first_name']}) ‚Äî {score} –æ—á–∫–æ–≤\n"
                
                message += f"\n‚è≥ –î–æ –∫–æ–Ω—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {str(tournament_end - current_time).split('.')[0]}"
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def validate_bet(bet, min_bet=1, max_bet=1000000):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∫–∏"""
    if not isinstance(bet, int):
        raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    if bet < min_bet:
        raise ValueError(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_bet} –º–æ–Ω–µ—Ç")
    if bet > max_bet:
        raise ValueError(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_bet} –º–æ–Ω–µ—Ç")
    return True

def cmd_baccarat(vk, event, args):
    """–ò–≥—Ä–∞ –≤ –±–∞–∫–∫–∞—Ä–∞"""
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /baccarat [—Å—Ç–∞–≤–∫–∞] [player/banker/tie]"
    
    try:
        bet = int(args[0])
        bet_type = args[1].lower() if len(args) > 1 else 'player'
        
        if bet_type not in ['player', 'banker', 'tie']:
            return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É: player, banker –∏–ª–∏ tie"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        validate_bet(bet, min_bet=100, max_bet=100000)
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = c.fetchone()
        
        if not balance or balance[0] < bet:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        def draw_card():
            return random.randint(1, 10)  # 10 –≤–∫–ª—é—á–∞–µ—Ç —Ç–∞–∫–∂–µ J, Q, K
        
        player = [draw_card(), draw_card()]
        banker = [draw_card(), draw_card()]
        
        # –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã
        player_score = sum(player) % 10
        banker_score = sum(banker) % 10
        
        if player_score <= 5:
            player.append(draw_card())
            player_score = sum(player) % 10
        
        if banker_score <= 5 and (len(player) == 2 or banker_score < player_score):
            banker.append(draw_card())
            banker_score = sum(banker) % 10
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if player_score > banker_score:
            winner = 'player'
        elif banker_score > player_score:
            winner = 'banker'
        else:
            winner = 'tie'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        multipliers = {'player': 2, 'banker': 1.95, 'tie': 9}
        
        if winner == bet_type:
            win = int(bet * multipliers[bet_type])
            result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        else:
            win = -bet
            result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                 (win, user_id))
        update_user_stats(conn, user_id, win)
        
        message = (f"üé¥ –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞: {player} (—Å—É–º–º–∞: {player_score})\n"
                  f"üé¥ –ö–∞—Ä—Ç—ã –±–∞–Ω–∫–∏—Ä–∞: {banker} (—Å—É–º–º–∞: {banker_score})\n"
                  f"{result}")
        
        if win > 0:
            achievements = check_achievement(conn, user_id, win, 'baccarat')
            if achievements:
                message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
        
        conn.commit()
        conn.close()
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_crash(vk, event, args):
    """–ò–≥—Ä–∞ Crash - —Ä–∞—Å—Ç—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω—É–∂–Ω–æ —É—Å–ø–µ—Ç—å –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"""
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /crash [—Å—Ç–∞–≤–∫–∞] [–¥–µ–π—Å—Ç–≤–∏–µ: start/cashout]"
    
    try:
        bet = int(args[0])
        action = args[1].lower() if len(args) > 1 else 'start'
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        validate_bet(bet, min_bet=50, max_bet=50000)
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        if action == 'start':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
            balance = c.fetchone()
            
            if not balance or balance[0] < bet:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—Ö–∞ (1.0 - 10.0)
            crash_point = round(random.uniform(1.0, 10.0), 2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            game_state = {
                'bet': bet,
                'crash_point': crash_point,
                'current_multiplier': 1.0,
                'timestamp': datetime.now().isoformat()
            }
            
            c.execute("""INSERT INTO game_states (user_id, game_type, state, timestamp)
                       VALUES (?, 'crash', ?, ?)""",
                       (user_id, json.dumps(game_state), datetime.now()))
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?',
                     (bet, user_id))
            
            conn.commit()
            return f"üìà –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crash [—Å—Ç–∞–≤–∫–∞] cashout —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
            
        elif action == 'cashout':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute("""SELECT state FROM game_states 
                       WHERE user_id = ? AND game_type = 'crash'
                       ORDER BY timestamp DESC LIMIT 1""", (user_id,))
            saved_state = c.fetchone()
            
            if not saved_state:
                return "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"
            
            game_state = json.loads(saved_state[0])
            crash_point = game_state['crash_point']
            current_multiplier = round(game_state['current_multiplier'] + 0.1, 2)
            
            if current_multiplier >= crash_point:
                # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à
                c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                         (user_id, 'crash'))
                conn.commit()
                return f"üí• –ö—Ä–∞—Ö –ø—Ä–∏ {crash_point}x!\n–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {bet} –º–æ–Ω–µ—Ç"
            
            # –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥
            win = int(bet * current_multiplier)
            c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                     (win, user_id))
            update_user_stats(conn, user_id, win - bet)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                     (user_id, 'crash'))
            
            message = f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ {current_multiplier}x!\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç"
            
            achievements = check_achievement(conn, user_id, win - bet, 'crash')
            if achievements:
                message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
            
            conn.commit()
            return message
            
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start –∏–ª–∏ cashout"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_mines(vk, event, args):
    """–ò–≥—Ä–∞ Mines - –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∏—Ç–µ –Ω–∞ –º–∏–Ω—É"""
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mines [—Å—Ç–∞–≤–∫–∞] [–¥–µ–π—Å—Ç–≤–∏–µ: start/open X/cashout]"
    
    try:
        bet = int(args[0])
        action = args[1].lower() if len(args) > 1 else 'start'
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        validate_bet(bet, min_bet=50, max_bet=50000)
        
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        if action == 'start':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
            balance = c.fetchone()
            
            if not balance or balance[0] < bet:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ 5x5 —Å 5 –º–∏–Ω–∞–º–∏
            field = ['üíé'] * 25
            mines = random.sample(range(25), 5)
            for mine in mines:
                field[mine] = 'üí£'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            game_state = {
                'bet': bet,
                'field': field,
                'opened': [],
                'multiplier': 1.0,
                'timestamp': datetime.now().isoformat()
            }
            
            c.execute("""INSERT INTO game_states (user_id, game_type, state, timestamp)
                       VALUES (?, 'mines', ?, ?)""",
                       (user_id, json.dumps(game_state), datetime.now()))
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?',
                     (bet, user_id))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è
            display = ['‚ùì'] * 25
            field_display = '\n'.join(' '.join(display[i:i+5]) for i in range(0, 25, 5))
            
            conn.commit()
            return f"üíé –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x\n\n{field_display}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mines [—Å—Ç–∞–≤–∫–∞] open [1-25] —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É"
            
        elif action.startswith('open'):
            try:
                position = int(args[2]) - 1
                if position < 0 or position >= 25:
                    return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –æ—Ç 1 –¥–æ 25"
            except:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute("""SELECT state FROM game_states 
                       WHERE user_id = ? AND game_type = 'mines'
                       ORDER BY timestamp DESC LIMIT 1""", (user_id,))
            saved_state = c.fetchone()
            
            if not saved_state:
                return "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"
            
            game_state = json.loads(saved_state[0])
            field = game_state['field']
            opened = game_state['opened']
            
            if position in opened:
                return "‚ö†Ô∏è –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞"
            
            if field[position] == 'üí£':
                # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à
                c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                         (user_id, 'mines'))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
                display = ['‚ùì'] * 25
                for i, cell in enumerate(field):
                    if cell == 'üí£' or i in opened:
                        display[i] = cell
                field_display = '\n'.join(' '.join(display[i:i+5]) for i in range(0, 25, 5))
                
                conn.commit()
                return f"üí• –ë—É–º! –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!\n–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {bet} –º–æ–Ω–µ—Ç\n\n{field_display}"
            
            # –£—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
            opened.append(position)
            game_state['opened'] = opened
            game_state['multiplier'] = round(1.0 + len(opened) * 0.2, 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute("""UPDATE game_states 
                       SET state = ?, timestamp = ?
                       WHERE user_id = ? AND game_type = 'mines'""",
                       (json.dumps(game_state), datetime.now(), user_id))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
            display = ['‚ùì'] * 25
            for i in opened:
                display[i] = field[i]
            field_display = '\n'.join(' '.join(display[i:i+5]) for i in range(0, 25, 5))
            
            conn.commit()
            return f"üíé –£—Å–ø–µ—à–Ω–æ! –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {game_state['multiplier']}x\n\n{field_display}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–ª–µ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mines [—Å—Ç–∞–≤–∫–∞] cashout —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
            
        elif action == 'cashout':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute("""SELECT state FROM game_states 
                       WHERE user_id = ? AND game_type = 'mines'
                       ORDER BY timestamp DESC LIMIT 1""", (user_id,))
            saved_state = c.fetchone()
            
            if not saved_state:
                return "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"
            
            game_state = json.loads(saved_state[0])
            win = int(bet * game_state['multiplier'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?',
                     (win, user_id))
            update_user_stats(conn, user_id, win - bet)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            c.execute('DELETE FROM game_states WHERE user_id = ? AND game_type = ?',
                     (user_id, 'mines'))
            
            message = f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥!\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç (x{game_state['multiplier']})"
            
            achievements = check_achievement(conn, user_id, win - bet, 'mines')
            if achievements:
                message += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
            
            conn.commit()
            return message
            
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start, open –∏–ª–∏ cashout"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}" 