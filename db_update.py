import sqlite3
from datetime import datetime
from logger import log_error

def adapt_datetime(dt):
    """Convert datetime to string for SQLite storage"""
    return dt.isoformat()

def convert_datetime(s):
    """Convert string from SQLite to datetime"""
    try:
        return datetime.fromisoformat(s.decode())
    except (AttributeError, ValueError):
        return None

def update_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å datetime
        sqlite3.register_adapter(datetime, adapt_datetime)
        sqlite3.register_converter("TIMESTAMP", convert_datetime)
        
        conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES, timeout=20)
        conn.execute('PRAGMA foreign_keys = ON')
        c = conn.cursor()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        with conn:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É users
            try:
                c.execute('ALTER TABLE users ADD COLUMN reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
            except sqlite3.OperationalError:
                pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
            try:
                c.execute('ALTER TABLE users ADD COLUMN invited_count INTEGER DEFAULT 0')
            except sqlite3.OperationalError:
                pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            # –û–±–Ω–æ–≤–ª—è–µ–º reg_date –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–æ NULL
            c.execute('UPDATE users SET reg_date = CURRENT_TIMESTAMP WHERE reg_date IS NULL')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
            try:
                c.execute('ALTER TABLE users ADD COLUMN games_won INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN games_lost INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN total_winnings INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN total_losses INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN tournament_points INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN last_tournament_reward TIMESTAMP')
                c.execute('ALTER TABLE users ADD COLUMN jackpot_wins INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN poker_wins INTEGER DEFAULT 0')
                c.execute('ALTER TABLE users ADD COLUMN biggest_win INTEGER DEFAULT 0')
            except sqlite3.OperationalError:
                pass

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            c.execute('''CREATE TABLE IF NOT EXISTS settings
                        (key TEXT PRIMARY KEY,
                         value TEXT)''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("lottery_jackpot", "1000")')
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("jackpot_bank", "0")')
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("tournament_end", NULL)')
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("tournament_players", "{}")')
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("poker_rake", "5")')
            c.execute('INSERT OR IGNORE INTO settings (key, value) VALUES ("slots_jackpot", "10000")')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            c.execute('''CREATE TABLE IF NOT EXISTS tournament_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         tournament_date DATE,
                         place INTEGER,
                         points INTEGER,
                         reward INTEGER,
                         FOREIGN KEY (user_id) REFERENCES users(user_id))''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∂–µ–∫–ø–æ—Ç–æ–≤
            c.execute('''CREATE TABLE IF NOT EXISTS jackpot_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         amount INTEGER,
                         timestamp TIMESTAMP,
                         game_type TEXT,
                         FOREIGN KEY (user_id) REFERENCES users(user_id))''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            c.execute('''CREATE TABLE IF NOT EXISTS poker_tournaments
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         start_time TIMESTAMP,
                         end_time TIMESTAMP,
                         buy_in INTEGER,
                         prize_pool INTEGER,
                         max_players INTEGER,
                         status TEXT DEFAULT 'pending')''')

            c.execute('''CREATE TABLE IF NOT EXISTS poker_tournament_players
                        (tournament_id INTEGER,
                         user_id INTEGER,
                         position INTEGER,
                         prize INTEGER,
                         FOREIGN KEY (tournament_id) REFERENCES poker_tournaments(id),
                         FOREIGN KEY (user_id) REFERENCES users(user_id),
                         PRIMARY KEY (tournament_id, user_id))''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = [
                ('üé∞ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä', '–ù–∞–∫–æ–ø–∏—Ç—å 1,000,000 –º–æ–Ω–µ—Ç'),
                ('üíé –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', '–í—ã–∏–≥—Ä–∞—Ç—å 100,000 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑'),
                ('üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫', '–í—ã–∏–≥—Ä–∞—Ç—å 100 –∏–≥—Ä'),
                ('üëë –õ–µ–≥–µ–Ω–¥–∞ –∫–∞–∑–∏–Ω–æ', '–ù–∞–∫–æ–ø–∏—Ç—å 5,000,000 –º–æ–Ω–µ—Ç'),
                ('üåü –î–∂–µ–∫–ø–æ—Ç', '–í—ã–∏–≥—Ä–∞—Ç—å 500,000 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑'),
                ('üé≤ –ó–∞—è–¥–ª—ã–π –∏–≥—Ä–æ–∫', '–°—ã–≥—Ä–∞—Ç—å 1,000 –∏–≥—Ä'),
                ('‚ô†Ô∏è –ü–æ–∫–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏', '–í—ã–∏–≥—Ä–∞—Ç—å 50 —Ä–∞–∑ –≤ –ø–æ–∫–µ—Ä'),
                ('üí∞ –í–µ–∑—É–Ω—á–∏–∫', '–í—ã–∏–≥—Ä–∞—Ç—å –¥–∂–µ–∫–ø–æ—Ç 3 —Ä–∞–∑–∞'),
                ('üèÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ–µ—Ü', '–ó–∞–Ω—è—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ 5 —Ç—É—Ä–Ω–∏—Ä–∞—Ö')
            ]
            
            c.execute('''CREATE TABLE IF NOT EXISTS achievement_types
                        (type TEXT PRIMARY KEY,
                         description TEXT)''')
            
            for achievement_type, description in achievements:
                c.execute('INSERT OR IGNORE INTO achievement_types (type, description) VALUES (?, ?)',
                         (achievement_type, description))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            try:
                c.execute('ALTER TABLE chat_settings ADD COLUMN antispam_enabled INTEGER DEFAULT 0')
            except sqlite3.OperationalError:
                pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            try:
                c.execute('ALTER TABLE users ADD COLUMN last_activity TIMESTAMP')
            except sqlite3.OperationalError:
                pass

            try:
                c.execute('ALTER TABLE bug_reports ADD COLUMN status TEXT DEFAULT "new"')
            except sqlite3.OperationalError:
                pass

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            c.execute('''CREATE TABLE IF NOT EXISTS message_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         chat_id INTEGER,
                         message_type TEXT,
                         timestamp TIMESTAMP,
                         FOREIGN KEY (user_id) REFERENCES users(user_id),
                         FOREIGN KEY (chat_id) REFERENCES bot_chats(chat_id))''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤
            c.execute('''CREATE TABLE IF NOT EXISTS chat_stats
                        (chat_id INTEGER PRIMARY KEY,
                         messages_today INTEGER DEFAULT 0,
                         active_users_today INTEGER DEFAULT 0,
                         last_update TIMESTAMP,
                         FOREIGN KEY (chat_id) REFERENCES bot_chats(chat_id))''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            c.execute('''CREATE TABLE IF NOT EXISTS moderation_logs
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         moderator_id INTEGER,
                         action TEXT,
                         target_id INTEGER,
                         chat_id INTEGER,
                         reason TEXT,
                         timestamp TIMESTAMP,
                         FOREIGN KEY (moderator_id) REFERENCES users(user_id),
                         FOREIGN KEY (chat_id) REFERENCES bot_chats(chat_id))''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
            c.execute('''CREATE TABLE IF NOT EXISTS antispam_settings
                        (chat_id INTEGER PRIMARY KEY,
                         message_interval REAL DEFAULT 1.0,
                         max_messages INTEGER DEFAULT 5,
                         check_period INTEGER DEFAULT 10,
                         max_warnings INTEGER DEFAULT 3,
                         mute_duration INTEGER DEFAULT 300,
                         max_similar_messages INTEGER DEFAULT 3,
                         similarity_threshold REAL DEFAULT 0.85,
                         FOREIGN KEY (chat_id) REFERENCES bot_chats(chat_id))''')

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            c.execute('''CREATE TABLE IF NOT EXISTS bans
                        (user_id INTEGER,
                         chat_id INTEGER,
                         ban_time TIMESTAMP,
                         PRIMARY KEY (user_id, chat_id))''')

            c.execute('''CREATE TABLE IF NOT EXISTS warn_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         warned_by INTEGER,
                         reason TEXT,
                         timestamp TIMESTAMP)''')

            c.execute('''CREATE TABLE IF NOT EXISTS message_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         chat_id INTEGER,
                         message_type TEXT,
                         timestamp TIMESTAMP)''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            c.execute('''CREATE TABLE IF NOT EXISTS reputation_history
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         from_user_id INTEGER,
                         to_user_id INTEGER,
                         amount INTEGER,
                         reason TEXT,
                         timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         FOREIGN KEY (from_user_id) REFERENCES users(user_id),
                         FOREIGN KEY (to_user_id) REFERENCES users(user_id))''')

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            c.execute('CREATE INDEX IF NOT EXISTS idx_message_history_user ON message_history(user_id)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_message_history_chat ON message_history(chat_id)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_message_history_time ON message_history(timestamp)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_bans_user ON bans(user_id)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_bans_chat ON bans(chat_id)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_warn_history_user ON warn_history(user_id)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_reputation_history_timestamp ON reputation_history(timestamp)')
            c.execute('CREATE INDEX IF NOT EXISTS idx_reputation_history_users ON reputation_history(from_user_id, to_user_id)')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            c.execute('UPDATE users SET last_activity = ? WHERE last_activity IS NULL', (datetime.now(),))
            c.execute('UPDATE chat_settings SET antispam_enabled = 0 WHERE antispam_enabled IS NULL')

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity
            c.execute('''CREATE TRIGGER IF NOT EXISTS update_user_activity
                        AFTER INSERT ON message_history
                        BEGIN
                            UPDATE users 
                            SET last_activity = NEW.timestamp 
                            WHERE user_id = NEW.user_id;
                        END''')

        conn.commit()
        conn.close()
        return True
    except sqlite3.Error as e:
        log_error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
        return False
    except Exception as e:
        log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
        return False

if __name__ == "__main__":
    if update_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö") 