import sqlite3
from datetime import datetime, timedelta
from vk_api.utils import get_random_id
import random
from utils import extract_user_id

def cmd_profile(vk, event, args):
    try:
        if args:
            target = ' '.join(args)
            user_id = extract_user_id(vk, target)
            if not user_id:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Get user info
        c.execute('''SELECT nickname, level, xp, messages_count, balance, reputation 
                    FROM users WHERE user_id = ?''', (user_id,))
        result = c.fetchone()
        
        if not result:
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        nickname, level, xp, messages, balance, reputation = result
        
        # Get marriage info
        c.execute('''SELECT user2_id, marriage_date FROM marriages 
                    WHERE user1_id = ? OR user2_id = ?''', (user_id, user_id))
        marriage = c.fetchone()
        
        # Get achievements
        c.execute('SELECT achievement_type FROM achievements WHERE user_id = ?', (user_id,))
        achievements = c.fetchall()
        
        conn.close()
        
        # Format message
        user_info = vk.users.get(user_ids=user_id)[0]
        message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{user_id} ({user_info['first_name']}):\n\n"
        if nickname:
            message += f"üè∑ –ù–∏–∫: {nickname}\n"
        message += f"üìä –£—Ä–æ–≤–µ–Ω—å: {level} ({xp}/{level * 1000} XP)\n"
        message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages}\n"
        message += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
        message += f"üëç –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
        
        if marriage:
            partner_id = marriage[0]
            partner_info = vk.users.get(user_ids=partner_id)[0]
            marriage_date = datetime.strptime(marriage[1], '%Y-%m-%d %H:%M:%S.%f')
            message += f"üíë –í –±—Ä–∞–∫–µ —Å @id{partner_id} ({partner_info['first_name']}) —Å {marriage_date.strftime('%d.%m.%Y')}\n"
        
        if achievements:
            message += "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement in achievements:
                message += f"‚Ä¢ {achievement[0]}\n"
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def cmd_give(vk, event, args):
    """–ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if len(args) < 2:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give [ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"
    
    try:
        target = args[0]
        amount = int(args[1])
        from_id = event.obj.message['from_id']
        
        if amount < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏: 1 –º–æ–Ω–µ—Ç–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        to_id = extract_user_id(vk, target)
        if not to_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if from_id == to_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        c.execute('SELECT balance FROM users WHERE user_id = ?', (from_id,))
        sender_balance = c.fetchone()
        
        if not sender_balance or sender_balance[0] < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–Ω–µ—Ç—ã
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, from_id))
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, to_id))
        
        conn.commit()
        conn.close()
        
        user_info = vk.users.get(user_ids=[to_id])[0]
        return f"üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id{to_id} ({user_info['first_name']})"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
def cmd_nickname(vk, event, args):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫"
    
    try:
        user_id = event.obj.message['from_id']
        nickname = ' '.join(args)
        
        if len(nickname) > 20:
            return "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞: 20 —Å–∏–º–≤–æ–ª–æ–≤"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫
        c.execute('UPDATE users SET nickname = ? WHERE user_id = ?', (nickname, user_id))
        
        conn.commit()
        conn.close()
        
        return f"üè∑ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {nickname}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    


def cmd_achievements(vk, event):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        c.execute('''SELECT a.achievement_type, a.achievement_date, at.description 
                    FROM achievements a
                    JOIN achievement_types at ON a.achievement_type = at.type
                    WHERE a.user_id = ?
                    ORDER BY a.achievement_date DESC''', (user_id,))
        achievements = c.fetchall()
        
        if not achievements:
            return "üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        message = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
        for achievement_type, achievement_date, description in achievements:
            formatted_date = achievement_date.strftime('%d.%m.%Y')
            message += f"‚Ä¢ {achievement_type} - {description}\n  –ü–æ–ª—É—á–µ–Ω–æ: {formatted_date}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        c.execute('''SELECT total_winnings, games_won, games_lost, 
                     jackpot_wins, poker_wins, biggest_win,
                     (SELECT COUNT(*) FROM tournament_history 
                      WHERE user_id = ? AND place = 1) as tournament_wins
                     FROM users WHERE user_id = ?''', (user_id, user_id))
        stats = c.fetchone()
        
        if stats:
            total_winnings, games_won, games_lost, jackpot_wins, poker_wins, biggest_win, tournament_wins = stats
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            message += "\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n"
            earned_types = {ach[0] for ach in achievements}
            
            progress = [
                ('üé∞ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä', total_winnings, 1000000, '–º–æ–Ω–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–æ'),
                ('üíé –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', biggest_win, 100000, '–º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑'),
                ('üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫', games_won, 100, '–ø–æ–±–µ–¥'),
                ('üëë –õ–µ–≥–µ–Ω–¥–∞ –∫–∞–∑–∏–Ω–æ', total_winnings, 5000000, '–º–æ–Ω–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–æ'),
                ('‚ô†Ô∏è –ü–æ–∫–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏', poker_wins, 50, '–ø–æ–±–µ–¥ –≤ –ø–æ–∫–µ—Ä'),
                ('üí∞ –í–µ–∑—É–Ω—á–∏–∫', jackpot_wins, 3, '–¥–∂–µ–∫–ø–æ—Ç–∞ –≤—ã–∏–≥—Ä–∞–Ω–æ'),
                ('üèÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ–µ—Ü', tournament_wins, 5, '–ø–æ–±–µ–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö'),
                ('üé≤ –ó–∞—è–¥–ª—ã–π –∏–≥—Ä–æ–∫', games_won + games_lost, 1000, '–∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ')
            ]
            
            for ach_type, current, required, metric in progress:
                if ach_type not in earned_types:
                    percentage = min(100, int(current * 100 / required))
                    message += f"‚Ä¢ {ach_type}: {current}/{required} {metric} ({percentage}%)\n"
        
        conn.close()
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_daily(vk, event):
    try:
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Check last daily claim
        c.execute('SELECT last_daily FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if result and result[0]:
            last_daily = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
            if datetime.now() - last_daily < timedelta(days=1):
                next_daily = last_daily + timedelta(days=1)
                return f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {next_daily.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        # Give reward
        reward = random.randint(100, 500)
        c.execute('''UPDATE users 
                    SET balance = balance + ?, last_daily = ? 
                    WHERE user_id = ?''', (reward, datetime.now(), user_id))
        
        conn.commit()
        conn.close()
        
        return f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: {reward} –º–æ–Ω–µ—Ç!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_marry(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        user_id = event.obj.message['from_id']
        target = ' '.join(args)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ ID
        partner_id = extract_user_id(vk, target)
        
        if not partner_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if user_id == partner_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Check if either user is already married
        c.execute('''SELECT 1 FROM marriages 
                    WHERE user1_id IN (?, ?) OR user2_id IN (?, ?)''', 
                    (user_id, partner_id, user_id, partner_id))
        if c.fetchone():
            return "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ"
        
        # Create marriage
        c.execute('''INSERT INTO marriages (user1_id, user2_id, marriage_date)
                    VALUES (?, ?, ?)''', (user_id, partner_id, datetime.now()))
        
        conn.commit()
        conn.close()
        
        user_info = vk.users.get(user_ids=[user_id, partner_id])
        return f"üíë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! @id{user_id} ({user_info[0]['first_name']}) –∏ @id{partner_id} ({user_info[1]['first_name']}) —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_divorce(vk, event):
    try:
        user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Find and delete marriage
        c.execute('''DELETE FROM marriages 
                    WHERE user1_id = ? OR user2_id = ?''', (user_id, user_id))
        
        if c.rowcount == 0:
            return "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ"
        
        conn.commit()
        conn.close()
        
        return "üíî –ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_rep(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É"
    
    try:
        from_id = event.obj.message['from_id']
        target = args[0]
        reason = ' '.join(args[1:]) if len(args) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        to_id = extract_user_id(vk, target)
        if not to_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if from_id == to_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Add reputation point and history
        c.execute('''UPDATE users 
                    SET reputation = reputation + 1 
                    WHERE user_id = ?''', (to_id,))
        
        c.execute('''INSERT INTO reputation_history 
                    (from_user_id, to_user_id, amount, reason, timestamp)
                    VALUES (?, ?, 1, ?, ?)''', 
                    (from_id, to_id, reason, datetime.now()))
        
        conn.commit()
        
        # Get new reputation value
        c.execute('SELECT reputation FROM users WHERE user_id = ?', (to_id,))
        new_rep = c.fetchone()[0]
        
        conn.close()
        
        user_info = vk.users.get(user_ids=[to_id])[0]
        return f"üëç –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{to_id} ({user_info['first_name']}). –¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {new_rep}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_game(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /game [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞]"
    
    try:
        user_choice = args[0].lower()
        choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
        
        if user_choice not in choices:
            return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞"
        
        bot_choice = random.choice(choices)
        
        # Determine winner
        if user_choice == bot_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif ((user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or
              (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or
              (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å')):
            result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        else:
            result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        
        return f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n{result}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_top(vk, event, args):
    try:
        category = args[0] if args else 'level'
        
        categories = {
            'level': ('—É—Ä–æ–≤–Ω—é', 'level'),
            'messages': ('—Å–æ–æ–±—â–µ–Ω–∏—è–º', 'messages_count'),
            'balance': ('–±–∞–ª–∞–Ω—Å—É', 'balance'),
            'rep': ('—Ä–µ–ø—É—Ç–∞—Ü–∏–∏', 'reputation')
        }
        
        if category not in categories:
            return "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: level, messages, balance, rep"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute(f'''SELECT user_id, {categories[category][1]} 
                    FROM users 
                    ORDER BY {categories[category][1]} DESC 
                    LIMIT 10''')
        top_users = c.fetchall()
        conn.close()
        
        if not top_users:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        message = f"üèÜ –¢–æ–ø 10 –ø–æ {categories[category][0]}:\n\n"
        
        user_ids = [user[0] for user in top_users]
        users_info = vk.users.get(user_ids=user_ids)
        users_dict = {user['id']: user for user in users_info}
        
        for i, (user_id, value) in enumerate(top_users, 1):
            user = users_dict.get(user_id, {'first_name': 'Unknown', 'last_name': 'User'})
            message += f"{i}. @id{user_id} ({user['first_name']}): {value}\n"
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}" 