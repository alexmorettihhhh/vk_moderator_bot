import sqlite3
from datetime import datetime, timedelta
from vk_api.utils import get_random_id
import random
from utils import extract_user_id

def cmd_profile(vk, event, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if args:
            target = ' '.join(args)
            user_id = extract_user_id(vk, target)
            if not user_id:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ message_history
        c.execute('''SELECT COUNT(*) FROM message_history WHERE user_id = ?''', (user_id,))
        messages_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        c.execute('''SELECT level, xp, balance, reputation, nickname, role, invited_count
                    FROM users 
                    WHERE user_id = ?''', (user_id,))
        result = c.fetchone()
        
        if not result:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
        level, xp, balance, reputation, nickname, role, invited_count = result
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ VK API
        user_info = vk.users.get(user_ids=[user_id])[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['first_name']} {user_info['last_name']}\n\n"
        message += f"üëë –†–æ–ª—å: {role}\n"
        message += f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        message += f"‚ú® –û–ø—ã—Ç: {xp}\n"
        message += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n"
        message += f"üëç –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
        message += f"üí≠ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
        message += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_count}\n"
        
        if nickname:
            message += f"üè∑ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±—Ä–∞–∫–µ
        c.execute('''SELECT user2_id, marriage_date 
                    FROM marriages 
                    WHERE user1_id = ?
                    UNION
                    SELECT user1_id, marriage_date 
                    FROM marriages 
                    WHERE user2_id = ?''', (user_id, user_id))
        marriage = c.fetchone()
        
        if marriage:
            partner_id, marriage_date = marriage
            partner_info = vk.users.get(user_ids=[partner_id])[0]
            message += f"\nüíç –í –±—Ä–∞–∫–µ —Å {partner_info['first_name']} {partner_info['last_name']}\n"
            message += f"üìÖ –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã: {marriage_date}"
        
        conn.close()
        return message
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def cmd_give(vk, event, args):
    """–ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if len(args) < 2:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give [ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"
    
    try:
        target = args[0]
        amount = int(args[1])
        from_id = event.obj.message['from_id']
        
        if amount < 1:
            return "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏: 1 –º–æ–Ω–µ—Ç–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        to_id = extract_user_id(vk, target)
        if not to_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if from_id == to_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ
        c.execute('SELECT balance FROM users WHERE user_id = ?', (from_id,))
        sender = c.fetchone()
        if not sender:
            c.execute('INSERT INTO users (user_id, balance) VALUES (?, 0)', (from_id,))
            conn.commit()
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if sender[0] < amount:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ (—É –≤–∞—Å {sender[0]} –º–æ–Ω–µ—Ç)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        c.execute('SELECT 1 FROM users WHERE user_id = ?', (to_id,))
        if not c.fetchone():
            c.execute('INSERT INTO users (user_id, balance) VALUES (?, 0)', (to_id,))
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–Ω–µ—Ç—ã
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, from_id))
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, to_id))
        
        conn.commit()
        conn.close()
        
        user_info = vk.users.get(user_ids=[to_id])[0]
        return f"üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id{to_id} ({user_info['first_name']})"
    except ValueError:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º–æ–Ω–µ—Ç: {str(e)}"
    
def cmd_nickname(vk, event, args):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫"
    
    try:
        user_id = event.obj.message['from_id']
        nickname = ' '.join(args)
        
        if len(nickname) > 20:
            return "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞: 20 —Å–∏–º–≤–æ–ª–æ–≤"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫
        c.execute('UPDATE users SET nickname = ? WHERE user_id = ?', (nickname, user_id))
        
        conn.commit()
        conn.close()
        
        return f"üè∑ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {nickname}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    


def cmd_achievements(vk, event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('''SELECT a.type, a.earned_date, at.description 
                    FROM achievements a 
                    JOIN achievement_types at ON a.type = at.type 
                    WHERE a.user_id = ?
                    ORDER BY a.earned_date DESC''', (user_id,))
        achievements = c.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        c.execute('SELECT type, description FROM achievement_types')
        all_achievements = c.fetchall()
        
        conn.close()
        
        if not all_achievements:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        message = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
        
        if achievements:
            for achievement in achievements:
                achievement_type, earned_date, description = achievement
                earned_date = datetime.strptime(earned_date, '%Y-%m-%d %H:%M:%S.%f')
                message += f"{achievement_type} - {description}\n"
                message += f"–ü–æ–ª—É—á–µ–Ω–æ: {earned_date.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n"
        
        message += "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in all_achievements:
            achievement_type, description = achievement
            if (achievement_type,) not in [(a[0],) for a in achievements]:
                message += f"{achievement_type} - {description}\n"
        
        return message
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_daily(vk, event):
    try:
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Check last daily claim
        c.execute('SELECT last_daily FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if result and result[0]:
            last_daily = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
            if datetime.now() - last_daily < timedelta(days=1):
                next_daily = last_daily + timedelta(days=1)
                return f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {next_daily.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        # Give reward
        reward = random.randint(100, 500)
        c.execute('''UPDATE users 
                    SET balance = balance + ?, last_daily = ? 
                    WHERE user_id = ?''', (reward, datetime.now(), user_id))
        
        conn.commit()
        conn.close()
        
        return f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: {reward} –º–æ–Ω–µ—Ç!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_marry(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        user_id = event.obj.message['from_id']
        target = ' '.join(args)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ ID
        partner_id = extract_user_id(vk, target)
        
        if not partner_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if user_id == partner_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Check if either user is already married
        c.execute('''SELECT 1 FROM marriages 
                    WHERE user1_id IN (?, ?) OR user2_id IN (?, ?)''', 
                    (user_id, partner_id, user_id, partner_id))
        if c.fetchone():
            return "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ"
        
        # Create marriage
        c.execute('''INSERT INTO marriages (user1_id, user2_id, marriage_date)
                    VALUES (?, ?, ?)''', (user_id, partner_id, datetime.now()))
        
        conn.commit()
        conn.close()
        
        user_info = vk.users.get(user_ids=[user_id, partner_id])
        return f"üíë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! @id{user_id} ({user_info[0]['first_name']}) –∏ @id{partner_id} ({user_info[1]['first_name']}) —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_divorce(vk, event):
    try:
        user_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Find and delete marriage
        c.execute('''DELETE FROM marriages 
                    WHERE user1_id = ? OR user2_id = ?''', (user_id, user_id))
        
        if c.rowcount == 0:
            return "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ"
        
        conn.commit()
        conn.close()
        
        return "üíî –ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_rep(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É"
    
    try:
        from_id = event.obj.message['from_id']
        target = args[0]
        reason = ' '.join(args[1:]) if len(args) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        to_id = extract_user_id(vk, target)
        if not to_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if from_id == to_id:
            return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # Add reputation point and history
        c.execute('''UPDATE users 
                    SET reputation = reputation + 1 
                    WHERE user_id = ?''', (to_id,))
        
        c.execute('''INSERT INTO reputation_history 
                    (from_user_id, to_user_id, amount, reason, timestamp)
                    VALUES (?, ?, 1, ?, ?)''', 
                    (from_id, to_id, reason, datetime.now()))
        
        conn.commit()
        
        # Get new reputation value
        c.execute('SELECT reputation FROM users WHERE user_id = ?', (to_id,))
        new_rep = c.fetchone()[0]
        
        conn.close()
        
        user_info = vk.users.get(user_ids=[to_id])[0]
        return f"üëç –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{to_id} ({user_info['first_name']}). –¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {new_rep}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_game(vk, event, args):
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /game [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞]"
    
    try:
        user_choice = args[0].lower()
        choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
        
        if user_choice not in choices:
            return "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞"
        
        bot_choice = random.choice(choices)
        
        # Determine winner
        if user_choice == bot_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif ((user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or
              (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or
              (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å')):
            result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        else:
            result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        
        return f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n{result}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_top(vk, event, args):
    try:
        category = args[0] if args else 'level'
        
        categories = {
            'level': ('—É—Ä–æ–≤–Ω—é', 'level'),
            'messages': ('—Å–æ–æ–±—â–µ–Ω–∏—è–º', 'messages_count'),
            'balance': ('–±–∞–ª–∞–Ω—Å—É', 'balance'),
            'rep': ('—Ä–µ–ø—É—Ç–∞—Ü–∏–∏', 'reputation')
        }
        
        if category not in categories:
            return "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: level, messages, balance, rep"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute(f'''SELECT user_id, {categories[category][1]} 
                    FROM users 
                    ORDER BY {categories[category][1]} DESC 
                    LIMIT 10''')
        top_users = c.fetchall()
        conn.close()
        
        if not top_users:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        message = f"üèÜ –¢–æ–ø 10 –ø–æ {categories[category][0]}:\n\n"
        
        user_ids = [user[0] for user in top_users]
        users_info = vk.users.get(user_ids=user_ids)
        users_dict = {user['id']: user for user in users_info}
        
        for i, (user_id, value) in enumerate(top_users, 1):
            user = users_dict.get(user_id, {'first_name': 'Unknown', 'last_name': 'User'})
            message += f"{i}. @id{user_id} ({user['first_name']}): {value}\n"
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}" 