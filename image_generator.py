from PIL import Image, ImageDraw, ImageFont, ImageFilter
import os
from datetime import datetime
import requests
from io import BytesIO
import numpy as np

class StatsImageGenerator:
    def __init__(self):
        fonts_dir = "fonts"
        if not os.path.exists(fonts_dir):
            os.makedirs(fonts_dir)
            
        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
        self.font_regular = ImageFont.truetype(f"{fonts_dir}/Roboto-Regular.ttf", 18)
        self.font_bold = ImageFont.truetype(f"{fonts_dir}/Roboto-Bold.ttf", 22)
        self.font_title = ImageFont.truetype(f"{fonts_dir}/Roboto-Bold.ttf", 44)
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é
        self.colors = {
            'background_start': (17, 23, 35),   # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            'background_end': (25, 35, 55),     # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
            'text': (255, 255, 255),           # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'secondary': (200, 210, 230),      # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π (—É–≤–µ–ª–∏—á–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å)
            'card': (30, 40, 60, 230),         # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
            'accent1': (88, 101, 242),         # Discord Blurple
            'accent2': (255, 115, 115),        # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
            'accent3': (87, 242, 135),         # –ú—è—Ç–Ω—ã–π
            'gradient1': (114, 137, 218),      # –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞—á–∞–ª–æ
            'gradient2': (255, 122, 122)       # –ì—Ä–∞–¥–∏–µ–Ω—Ç –∫–æ–Ω–µ—Ü
        }

    def create_circular_avatar(self, avatar_img, size):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–ª—É—é –∞–≤–∞—Ç–∞—Ä–∫—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            mask = Image.new('L', (size, size), 0)
            
            # –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, size, size), fill=255)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output = Image.new('RGB', (size, size), (0, 0, 0))
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
            avatar = avatar_img.resize((size, size), Image.Resampling.LANCZOS)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            output.paste(avatar, (0, 0), mask)
            
            return output
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏: {str(e)}")
            return None

    def get_user_avatar(self, user_id, avatar_url=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if avatar_url:
                response = requests.get(avatar_url, timeout=10)
                if response.status_code == 200:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
                    avatar = Image.open(BytesIO(response.content))
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    if avatar.mode != 'RGB':
                        avatar = avatar.convert('RGB')
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –Ω–∞—à –∫—Ä—É–≥
                    avatar = avatar.resize((100, 100), Image.Resampling.LANCZOS)
                    return avatar
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {str(e)}")
        return None

    def create_gradient_background(self, width, height):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        background = Image.new('RGB', (width, height))
        for y in range(height):
            r = int(self.colors['background_start'][0] + (self.colors['background_end'][0] - self.colors['background_start'][0]) * y / height)
            g = int(self.colors['background_start'][1] + (self.colors['background_end'][1] - self.colors['background_start'][1]) * y / height)
            b = int(self.colors['background_start'][2] + (self.colors['background_end'][2] - self.colors['background_start'][2]) * y / height)
            for x in range(width):
                background.putpixel((x, y), (r, g, b))
        return background

    def draw_rounded_rectangle(self, draw, xy, radius, fill):
        """–†–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
        x1, y1, x2, y2 = xy
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ x2 > x1 –∏ y2 > y1
        x1, x2 = min(x1, x2), max(x1, x2)
        y1, y2 = min(y1, y2), max(y1, y2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã –¥–ª—è —Ä–∞–¥–∏—É—Å–∞
        width = x2 - x1
        height = y2 - y1
        radius = min(radius, width//2, height//2)
        
        # –†–∏—Å—É–µ–º —É–≥–ª—ã
        draw.ellipse([x1, y1, x1 + radius * 2, y1 + radius * 2], fill=fill)
        draw.ellipse([x2 - radius * 2, y1, x2, y1 + radius * 2], fill=fill)
        draw.ellipse([x1, y2 - radius * 2, x1 + radius * 2, y2], fill=fill)
        draw.ellipse([x2 - radius * 2, y2 - radius * 2, x2, y2], fill=fill)
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        draw.rectangle([x1 + radius, y1, x2 - radius, y2], fill=fill)
        draw.rectangle([x1, y1 + radius, x2, y2 - radius], fill=fill)

    def draw_stat_card(self, draw, x, y, width, height, title, value, icon_text, accent_color):
        """–†–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        self.draw_rounded_rectangle(draw, (x, y, x + width, y + height), 10, self.colors['card'])
        
        # –û—Ç—Å—Ç—É–ø—ã
        padding = 20
        icon_size = int(height * 0.6)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
        icon_font = ImageFont.truetype("fonts/Roboto-Bold.ttf", icon_size)
        draw.text((x + padding, y + height//2), icon_text, 
                 font=icon_font, fill=accent_color, anchor="lm")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_x = x + padding + icon_size + padding
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–≤–µ—Ä—Ö—É)
        draw.text((text_x, y + height//3), title, 
                 font=self.font_regular, fill=self.colors['secondary'],
                 anchor="lm")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (—Å–Ω–∏–∑—É)
        draw.text((text_x, y + height*2//3), str(value), 
                 font=self.font_bold, fill=self.colors['text'],
                 anchor="lm")

    def draw_info_block(self, draw, x, y, width, height, user_data):
        """–†–∏—Å—É–µ—Ç –±–ª–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
        self.draw_rounded_rectangle(draw, (x, y, x + width, y + height), 15, self.colors['card'])

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        padding = 25
        line_height = 50
        icon_offset = 40

        # –°–æ–æ–±—â–µ–Ω–∏—è
        draw.text((x + padding, y + padding), "üí¨", font=self.font_bold, fill=self.colors['text'])
        draw.text((x + padding + icon_offset, y + padding), "–°–æ–æ–±—â–µ–Ω–∏–π", font=self.font_regular, fill=self.colors['secondary'])
        draw.text((x + padding + icon_offset, y + padding + 25), str(user_data.get('messages', 0)), font=self.font_bold, fill=self.colors['text'])

        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        draw.text((x + padding, y + padding + line_height), "üìÖ", font=self.font_bold, fill=self.colors['text'])
        draw.text((x + padding + icon_offset, y + padding + line_height), "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", font=self.font_regular, fill=self.colors['secondary'])
        draw.text((x + padding + icon_offset, y + padding + line_height + 25), str(user_data.get('reg_date', '')), font=self.font_bold, fill=self.colors['text'])

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        draw.text((x + padding, y + padding + line_height * 2), "‚åö", font=self.font_bold, fill=self.colors['text'])
        draw.text((x + padding + icon_offset, y + padding + line_height * 2), "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", font=self.font_regular, fill=self.colors['secondary'])
        draw.text((x + padding + icon_offset, y + padding + line_height * 2 + 25), datetime.now().strftime('%d.%m.%Y'), font=self.font_bold, fill=self.colors['text'])

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
        draw.text((x + padding, y + padding + line_height * 3), "üë•", font=self.font_bold, fill=self.colors['text'])
        draw.text((x + padding + icon_offset, y + padding + line_height * 3), "–ü—Ä–∏–≥–ª–∞—Å–∏–ª", font=self.font_regular, fill=self.colors['secondary'])
        draw.text((x + padding + icon_offset, y + padding + line_height * 3 + 25), f"{user_data.get('invited_count', 0)} —á–µ–ª.", font=self.font_bold, fill=self.colors['text'])

    def get_role_display_name(self, role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
        role_names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'moder': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'senior_moderator': '–°—Ç–∞—Ä—à–∏–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        return role_names.get(role.lower(), role)

    def create_stats_image(self, user_data):
        try:
            width = 850
            height = 450
            image = self.create_gradient_background(width, height)
            draw = ImageDraw.Draw(image)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_y = 35
            draw.text((width//2, title_y), "–°–¢–ê–¢–ò–°–¢–ò–ö–ê",
                    font=self.font_title, fill=self.colors['text'], anchor="mm")
            draw.line([(width//2 - 120, title_y + 30), (width//2 + 120, title_y + 30)],
                    fill=self.colors['accent1'], width=3)

            # –õ–µ–≤–∞—è —Å–µ–∫—Ü–∏—è (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫)
            info_block_width = 320
            info_block_height = 240
            self.draw_info_block(draw, 50, 100, info_block_width, info_block_height, user_data)

            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è (–∞–≤–∞—Ç–∞—Ä)
            center_x = width // 2 + 70  # –°–¥–≤–∏–≥–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø—Ä–∞–≤–µ–µ
            center_y = height // 2 - 80
            avatar_size = 100

            # –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—É—é –ø–æ–¥–ª–æ–∂–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
            for i in range(10):
                alpha = int(255 - i * 25)
                if alpha > 0:
                    draw.ellipse(
                        [center_x - avatar_size//2 - i, center_y - avatar_size//2 - i,
                        center_x + avatar_size//2 + i, center_y + avatar_size//2 + i],
                        outline=(88, 101, 242, alpha), width=2
                    )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            if 'avatar_url' in user_data:
                avatar = self.get_user_avatar(user_data['user_id'], user_data['avatar_url'])
                if avatar:
                    try:
                        circular_avatar = self.create_circular_avatar(avatar, avatar_size)
                        if circular_avatar:
                            mask = Image.new('L', (avatar_size, avatar_size), 0)
                            mask_draw = ImageDraw.Draw(mask)
                            mask_draw.ellipse((0, 0, avatar_size, avatar_size), fill=255)
                            image.paste(circular_avatar, 
                                    (center_x - avatar_size//2, center_y - avatar_size//2),
                                    mask)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏: {str(e)}")

            # –ü—Ä–∞–≤–∞—è —Å–µ–∫—Ü–∏—è
            x_right = width - 320

            # –£—Ä–æ–≤–µ–Ω—å (–Ω–∞ –º–µ—Å—Ç–µ —Ä–æ–ª–∏)
            level_y = 120
            level_text = str(user_data.get('level', 1))
            draw.text((x_right + 160, level_y), f"–£–†–û–í–ï–ù–¨ {level_text}", 
                    font=self.font_bold, fill=self.colors['text'], anchor="mm")

            # XP-–±–∞—Ä (–ø–æ–¥ —É—Ä–æ–≤–Ω–µ–º)
            xp = user_data.get('xp', 0)
            max_xp = user_data.get('level', 1) * 1000
            xp_percentage = min(xp / max_xp, 1) if max_xp > 0 else 0
            bar_width = 200
            bar_height = 8

            # –§–æ–Ω XP-–±–∞—Ä–∞
            bar_x = x_right + 60  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–π —Å–µ–∫—Ü–∏–∏
            bar_y = level_y + 30
            self.draw_rounded_rectangle(draw,
                                    (bar_x, bar_y,
                                     bar_x + bar_width, bar_y + bar_height),
                                    4, self.colors['card'])

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å XP-–±–∞—Ä–∞
            if xp_percentage > 0:
                fill_width = int(bar_width * xp_percentage)
                if fill_width > 0:
                    self.draw_rounded_rectangle(draw,
                                            (bar_x, bar_y,
                                             bar_x + fill_width, bar_y + bar_height),
                                            4, self.colors['accent1'])

            # XP —Ç–µ–∫—Å—Ç
            draw.text((x_right + 160, bar_y + 20),
                    f"{xp}/{max_xp} XP",
                    font=self.font_regular, fill=self.colors['secondary'], anchor="mm")

            # –†–æ–ª—å (–≤—ã—à–µ, –±–ª–∏–∂–µ –∫ —É—Ä–æ–≤–Ω—é)
            role_y = level_y + 145
            role = self.get_role_display_name(user_data.get('role', 'user'))
            role_color = self.colors['accent1'] if user_data.get('role', '').lower() == 'admin' else self.colors['text']
            self.draw_stat_card(draw, x_right + 40, role_y, 246, 70,
                                "–†–æ–ª—å", role,
                                "üëë", role_color)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            os.makedirs("temp", exist_ok=True)
            image_path = f"temp/stats_{user_data['user_id']}.png"
            image.save(image_path, quality=95)
            return image_path
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return None

def generate_stats_image(user_data):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    generator = StatsImageGenerator()
    return generator.create_stats_image(user_data) 