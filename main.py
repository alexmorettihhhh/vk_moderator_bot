import os
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from dotenv import load_dotenv
from datetime import datetime, timedelta
import sqlite3
import json
from fun_commands import (
    cmd_profile, cmd_daily, cmd_marry, cmd_divorce,
    cmd_rep, cmd_game, cmd_top
)
from games import cmd_slots, cmd_duel, cmd_wheel, cmd_flip
from utils import get_weather, get_currency_rates, extract_user_id
from admin_commands import (
    cmd_skick, cmd_quiet, cmd_sban, cmd_sunban,
    cmd_addsenmoder, cmd_bug, cmd_stats_chat, cmd_settings
)
from moderator_commands import (
    cmd_mute, cmd_unmute, cmd_warn, cmd_unwarn,
    cmd_getban, cmd_getwarn, cmd_warnhistory, cmd_staff
)
from senior_moderator_commands import (
    cmd_ban, cmd_unban, cmd_addmoder, cmd_removerole,
    cmd_zov, cmd_online, cmd_banlist, cmd_onlinelist
)
import time
import sys
from requests.exceptions import ConnectionError, ReadTimeout

# Load environment variables
load_dotenv()

# VK Bot configuration
TOKEN = os.getenv('VK_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))

# Initialize VK session
def init_vk():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK —Å–µ—Å—Å–∏–∏"""
    vk_session = vk_api.VkApi(token=TOKEN)
    vk = vk_session.get_api()
    longpoll = VkBotLongPoll(vk_session, GROUP_ID)
    return vk_session, vk, longpoll

# Database initialization
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # Create users table with new fields
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  role TEXT DEFAULT 'user',
                  nickname TEXT,
                  warnings INTEGER DEFAULT 0,
                  is_muted INTEGER DEFAULT 0,
                  mute_end TIMESTAMP,
                  messages_count INTEGER DEFAULT 0,
                  level INTEGER DEFAULT 1,
                  xp INTEGER DEFAULT 0,
                  balance INTEGER DEFAULT 0,
                  reputation INTEGER DEFAULT 0,
                  last_daily TIMESTAMP)''')
    
    # Create bans table
    c.execute('''CREATE TABLE IF NOT EXISTS bans
                 (user_id INTEGER,
                  chat_id INTEGER,
                  ban_time TIMESTAMP,
                  PRIMARY KEY (user_id, chat_id))''')
    
    # Create warn history table
    c.execute('''CREATE TABLE IF NOT EXISTS warn_history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  warned_by INTEGER,
                  reason TEXT,
                  timestamp TIMESTAMP)''')
    
    # Create marriages table
    c.execute('''CREATE TABLE IF NOT EXISTS marriages
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user1_id INTEGER,
                  user2_id INTEGER,
                  marriage_date TIMESTAMP,
                  UNIQUE(user1_id, user2_id))''')
    
    # Create achievements table
    c.execute('''CREATE TABLE IF NOT EXISTS achievements
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  achievement_type TEXT,
                  achievement_date TIMESTAMP)''')
    
    # Create chat_settings table with quiet_end column
    c.execute('''CREATE TABLE IF NOT EXISTS chat_settings
                 (chat_id INTEGER PRIMARY KEY,
                  quiet_mode INTEGER DEFAULT 0,
                  quiet_end TIMESTAMP,
                  welcome_message TEXT,
                  auto_warn INTEGER DEFAULT 0,
                  max_warnings INTEGER DEFAULT 3)''')
    
    # Create reputation_history table
    c.execute('''CREATE TABLE IF NOT EXISTS reputation_history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  from_user_id INTEGER,
                  to_user_id INTEGER,
                  amount INTEGER,
                  reason TEXT,
                  timestamp TIMESTAMP)''')
    
    # Create bug_reports table
    c.execute('''CREATE TABLE IF NOT EXISTS bug_reports
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  reporter_id INTEGER,
                  description TEXT,
                  report_time TIMESTAMP,
                  status TEXT DEFAULT 'new')''')
    
    # Create bot_chats table
    c.execute('''CREATE TABLE IF NOT EXISTS bot_chats
                 (chat_id INTEGER PRIMARY KEY,
                  join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  is_active INTEGER DEFAULT 1)''')
    
    # Add quiet_end column if it doesn't exist
    try:
        c.execute('ALTER TABLE chat_settings ADD COLUMN quiet_end TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # Column already exists
    
    conn.commit()
    conn.close()

# User commands
def cmd_info(vk, event):
    message = "üìö –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞:\n‚Ä¢ –ì—Ä—É–ø–ø–∞ –í–ö: vk.com/group\n‚Ä¢ –°–∞–π—Ç: example.com"
    vk.messages.send(
        chat_id=event.chat_id,
        message=message,
        random_id=get_random_id()
    )

def cmd_stats(vk, event):
    user_id = event.obj.message['from_id']
    user_info = vk.users.get(user_ids=user_id)[0]
    message = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nID: {user_id}\n–ò–º—è: {user_info['first_name']} {user_info['last_name']}"
    vk.messages.send(
        chat_id=event.chat_id,
        message=message,
        random_id=get_random_id()
    )

def cmd_getid(vk, event):
    user_id = event.obj.message['from_id']
    message = f"üÜî –í–∞—à ID: {user_id}"
    vk.messages.send(
        chat_id=event.chat_id,
        message=message,
        random_id=get_random_id()
    )

def cmd_help(vk, event, args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        user_id = event.obj.message['from_id']
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
        role = c.fetchone()
        role = role[0] if role else 'user'
        conn.close()
        
        message = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        message += "üë§ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        message += "‚Ä¢ /info ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞\n"
        message += "‚Ä¢ /stats ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        message += "‚Ä¢ /getid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        message += "‚Ä¢ /profile [ID] ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
        message += "‚Ä¢ /daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
        message += "‚Ä¢ /marry [ID] ‚Äî –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫\n"
        message += "‚Ä¢ /divorce ‚Äî —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å\n"
        message += "‚Ä¢ /rep [ID] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n"
        message += "‚Ä¢ /game [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] ‚Äî –∏–≥—Ä–∞\n"
        message += "‚Ä¢ /top [level/messages/balance/rep] ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
        
        message += "üéÆ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "‚Ä¢ /slots [—Å—Ç–∞–≤–∫–∞] ‚Äî –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã\n"
        message += "‚Ä¢ /duel [ID] [—Å—Ç–∞–≤–∫–∞] ‚Äî –¥—É—ç–ª—å\n"
        message += "‚Ä¢ /wheel [—Å—Ç–∞–≤–∫–∞] [red/black/green] ‚Äî —Ä—É–ª–µ—Ç–∫–∞\n"
        message += "‚Ä¢ /flip [—Å—Ç–∞–≤–∫–∞] [heads/tails] ‚Äî –º–æ–Ω–µ—Ç–∫–∞\n\n"
        
        message += "üõ† –£—Ç–∏–ª–∏—Ç—ã:\n"
        message += "‚Ä¢ /weather [–≥–æ—Ä–æ–¥] ‚Äî –ø–æ–≥–æ–¥–∞\n"
        message += "‚Ä¢ /rates ‚Äî –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        
        if role in ['moderator', 'senior_moderator', 'admin']:
            message += "\nüëÆ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
            message += "‚Ä¢ /kick [ID] ‚Äî –∫–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            message += "‚Ä¢ /mute [ID] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –º—É—Ç\n"
            message += "‚Ä¢ /unmute [ID] ‚Äî —Ä–∞–∑–º—É—Ç\n"
            message += "‚Ä¢ /warn [ID] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –≤–∞—Ä–Ω\n"
            message += "‚Ä¢ /unwarn [ID] ‚Äî —Å–Ω—è—Ç—å –≤–∞—Ä–Ω\n"
            message += "‚Ä¢ /getban [ID] ‚Äî –∏–Ω—Ñ–æ –æ –±–∞–Ω–∞—Ö\n"
            message += "‚Ä¢ /getwarn [ID] ‚Äî –∏–Ω—Ñ–æ –æ –≤–∞—Ä–Ω–∞—Ö\n"
            message += "‚Ä¢ /warnhistory [ID] ‚Äî –∏—Å—Ç–æ—Ä–∏—è –≤–∞—Ä–Ω–æ–≤\n"
            message += "‚Ä¢ /staff ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n"
        
        if role in ['senior_moderator', 'admin']:
            message += "\nüî® –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
            message += "‚Ä¢ /ban [ID] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –±–∞–Ω\n"
            message += "‚Ä¢ /unban [ID] ‚Äî —Ä–∞–∑–±–∞–Ω\n"
            message += "‚Ä¢ /addmoder [ID] ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            message += "‚Ä¢ /removerole [ID] ‚Äî —Å–Ω—è—Ç—å —Ä–æ–ª—å\n"
            message += "‚Ä¢ /zov ‚Äî –ø—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö\n"
            message += "‚Ä¢ /online ‚Äî —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω\n"
            message += "‚Ä¢ /banlist ‚Äî —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤\n"
            message += "‚Ä¢ /onlinelist ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ–Ω–ª–∞–π–Ω\n"
        
        if role == 'admin':
            message += "\nüëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            message += "‚Ä¢ /skick [ID] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –∫–∏–∫ —Å–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥\n"
            message += "‚Ä¢ /quiet [–≤—Ä–µ–º—è] ‚Äî —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã\n"
            message += "‚Ä¢ /sban [ID] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –±–∞–Ω –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö\n"
            message += "‚Ä¢ /sunban [ID] ‚Äî —Ä–∞–∑–±–∞–Ω –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö\n"
            message += "‚Ä¢ /addsenmoder [ID] ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç.–º–æ–¥–µ—Ä–∞\n"
            message += "‚Ä¢ /bug [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ\n"
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

# Moderator commands
def cmd_kick(vk, event, args):
    if not is_moderator(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
    
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        vk.messages.removeChatUser(
            chat_id=event.chat_id,
            user_id=user_id
        )
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def is_moderator(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result and result[0] in ['moderator', 'senior_moderator', 'admin']

def is_senior_moderator(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result and result[0] in ['senior_moderator', 'admin']

def is_admin(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result and result[0] == 'admin'

# Add XP and check level up
def add_xp(vk, event, user_id, xp_amount):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # Get current XP and level
    c.execute('SELECT xp, level FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    
    if result:
        current_xp, current_level = result
        new_xp = current_xp + xp_amount
        
        # Calculate new level (each level requires level * 1000 XP)
        new_level = current_level
        while new_xp >= new_level * 1000:
            new_xp -= new_level * 1000
            new_level += 1
        
        # Update user data
        c.execute('''UPDATE users 
                    SET xp = ?, level = ?, messages_count = messages_count + 1 
                    WHERE user_id = ?''', (new_xp, new_level, user_id))
        
        conn.commit()
        conn.close()
        
        return new_level > current_level
    else:
        # Create new user entry and check if this is the first user
        c.execute('SELECT COUNT(*) FROM users')
        user_count = c.fetchone()[0]
        
        # If this is the first user, make them admin
        role = 'admin' if user_count == 0 else 'user'
        
        c.execute('''INSERT INTO users (user_id, xp, level, messages_count, role) 
                    VALUES (?, ?, 1, 1, ?)''', (user_id, xp_amount, role))
        conn.commit()
        
        if role == 'admin':
            vk.messages.send(
                chat_id=event.chat_id,
                message=f"üëë @id{user_id}, –≤—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
                random_id=get_random_id()
            )
        
        conn.close()
        return False

def get_user_role(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 'user'

def is_quiet_mode(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –≤ —á–∞—Ç–µ"""
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute('''SELECT quiet_mode, quiet_end 
                    FROM chat_settings 
                    WHERE chat_id = ?''', (chat_id,))
        result = c.fetchone()
        conn.close()
        
        if result:
            quiet_mode, quiet_end = result
            if quiet_mode:
                if quiet_end:
                    quiet_end = datetime.strptime(quiet_end, '%Y-%m-%d %H:%M:%S.%f')
                    if quiet_end > datetime.now():
                        return True
                    else:
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                        conn = sqlite3.connect('bot.db')
                        c = conn.cursor()
                        c.execute('''UPDATE chat_settings 
                                   SET quiet_mode = 0, quiet_end = NULL 
                                   WHERE chat_id = ?''', (chat_id,))
                        conn.commit()
                        conn.close()
                        return False
                return True
        return False
    except Exception:
        return False

# Main event loop
def main():
    init_db()
    print("Bot started")
    
    while True:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK
            vk_session, vk, longpoll = init_vk()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat:
                    try:
                        message = event.obj.message['text'].lower()
                        user_id = event.obj.message['from_id']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if is_quiet_mode(event.chat_id):
                            user_role = get_user_role(user_id)
                            if user_role not in ['admin', 'senior_moderator', 'moderator']:
                                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                try:
                                    vk.messages.delete(
                                        peer_id=2000000000 + event.chat_id,
                                        conversation_message_ids=[event.obj.message['conversation_message_id']],
                                        delete_for_all=1
                                    )
                                    continue
                                except:
                                    pass
                        
                        # Add XP for message (if not a command)
                        if not message.startswith('/'):
                            if add_xp(vk, event, user_id, 10):  # Pass event object here
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=f"üéâ @id{user_id}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!",
                                    random_id=get_random_id()
                                )
                        
                        if message.startswith('/'):
                            command = message.split()[0][1:]
                            args = message.split()[1:] if len(message.split()) > 1 else []
                            
                            # User commands
                            if command == 'help':
                                response = cmd_help(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'info':
                                cmd_info(vk, event)
                            elif command == 'stats':
                                cmd_stats(vk, event)
                            elif command == 'getid':
                                cmd_getid(vk, event)
                            
                            # Fun commands
                            elif command == 'profile':
                                response = cmd_profile(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'daily':
                                response = cmd_daily(vk, event)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'marry':
                                response = cmd_marry(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'divorce':
                                response = cmd_divorce(vk, event)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'rep':
                                response = cmd_rep(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'game':
                                response = cmd_game(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'top':
                                response = cmd_top(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            
                            # Game commands
                            elif command == 'slots':
                                response = cmd_slots(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'duel':
                                response = cmd_duel(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'wheel':
                                response = cmd_wheel(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            elif command == 'flip':
                                response = cmd_flip(vk, event, args)
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            
                            # Utility commands
                            elif command == 'weather':
                                if not args:
                                    response = "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥"
                                else:
                                    city = ' '.join(args)
                                    weather = get_weather(city)
                                    if weather:
                                        response = (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                                                  f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                                                  f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
                                                  f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å\n"
                                                  f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                                                  f"üìù {weather['description'].capitalize()}")
                                    else:
                                        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            
                            elif command == 'rates':
                                rates = get_currency_rates()
                                if rates:
                                    response = (f"üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n"
                                              f"üíµ USD: {rates['USD']} ‚ÇΩ\n"
                                              f"üí∂ EUR: {rates['EUR']} ‚ÇΩ")
                                else:
                                    response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"
                                vk.messages.send(
                                    chat_id=event.chat_id,
                                    message=response,
                                    random_id=get_random_id()
                                )
                            
                            # Moderator commands
                            elif command == 'kick':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_kick(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'mute':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_mute(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'unmute':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_unmute(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'warn':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_warn(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'unwarn':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_unwarn(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'getban':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_getban(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'getwarn':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_getwarn(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'warnhistory':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_warnhistory(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'staff':
                                if is_moderator(event.obj.message['from_id']):
                                    response = cmd_staff(vk, event)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            
                            # Senior moderator commands
                            elif command == 'ban':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_ban(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'unban':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_unban(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'addmoder':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_addmoder(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'removerole':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_removerole(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'zov':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_zov(vk, event)
                                    if response:  # Only send if there's an error message
                                        vk.messages.send(
                                            chat_id=event.chat_id,
                                            message=response,
                                            random_id=get_random_id()
                                        )
                            elif command == 'online':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_online(vk, event)
                                    if response:  # Only send if there's an error message
                                        vk.messages.send(
                                            chat_id=event.chat_id,
                                            message=response,
                                            random_id=get_random_id()
                                        )
                            elif command == 'banlist':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_banlist(vk, event)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'onlinelist':
                                if is_senior_moderator(event.obj.message['from_id']):
                                    response = cmd_onlinelist(vk, event)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            
                            # Admin commands
                            elif command == 'skick':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_skick(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'quiet':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_quiet(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'sban':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_sban(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'sunban':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_sunban(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'addsenmoder':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_addsenmoder(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'bug':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_bug(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'stats_chat':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_stats_chat(vk, event)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            elif command == 'settings':
                                if is_admin(event.obj.message['from_id']):
                                    response = cmd_settings(vk, event, args)
                                    vk.messages.send(
                                        chat_id=event.chat_id,
                                        message=response,
                                        random_id=get_random_id()
                                    )
                            
                    except Exception as e:
                        print(f"Error processing message: {str(e)}")
                        continue
        
        except (ConnectionError, ReadTimeout) as e:
            print(f"Connection error: {str(e)}")
            print("Reconnecting in 5 seconds...")
            time.sleep(5)
            continue
        
        except Exception as e:
            print(f"Critical error: {str(e)}")
            print("Restarting in 30 seconds...")
            time.sleep(30)
            continue

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nBot stopped by user")
        sys.exit(0) 