import sqlite3
from datetime import datetime, timedelta
from vk_api.utils import get_random_id
from utils import get_chat_stats, parse_duration, format_duration, extract_user_id
from logger import log_moderation, log_error

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result and result[0] == 'admin'

def get_user_role(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 'user'

def cmd_skick(vk, event, args):
    """–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –±–µ—Å–µ–¥"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É"
    
    try:
        target = args[0]
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
        reason = ' '.join(args[1:]) if len(args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if is_admin(user_id):
            return "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute('SELECT chat_id FROM bot_chats WHERE is_active = 1')
        chats = c.fetchall()
        conn.close()
        
        kick_count = 0
        failed_chats = []
        for chat_id in chats:
            try:
                vk.messages.removeChatUser(
                    chat_id=chat_id[0],
                    user_id=user_id
                )
                kick_count += 1
            except Exception as e:
                failed_chats.append(str(chat_id[0]))
                continue
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        log_moderation(event.obj.message['from_id'], 'SKICK', user_id, reason)
        
        response = f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ {kick_count} –±–µ—Å–µ–¥\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        if failed_chats:
            response += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –±–µ—Å–µ–¥: {', '.join(failed_chats)}"
        return response
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ skick: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_quiet(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º —Ç–∏—à–∏–Ω—ã –≤ –±–µ—Å–µ–¥–µ"""
    try:
        if not args:
            new_mode = True
            duration = None
        else:
            new_mode = args[0].lower() not in ['off', '0', 'false']
            duration = int(args[1]) if len(args) > 1 else None
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        if duration:
            quiet_end = datetime.now() + timedelta(minutes=duration)
        else:
            quiet_end = None
        
        c.execute('''UPDATE chat_settings 
                    SET quiet_mode = ?, quiet_end = ? 
                    WHERE chat_id = ?''', 
                    (1 if new_mode else 0, quiet_end, event.chat_id))
        
        if c.rowcount == 0:
            c.execute('''INSERT INTO chat_settings 
                        (chat_id, quiet_mode, quiet_end) 
                        VALUES (?, ?, ?)''', 
                        (event.chat_id, 1 if new_mode else 0, quiet_end))
        
        conn.commit()
        conn.close()
        
        if duration and new_mode:
            duration_str = format_duration(duration)
            return f"ü§´ –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –≤–∫–ª—é—á–µ–Ω –Ω–∞ {duration_str}\n–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è."
        else:
            return f"{'ü§´ –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –≤–∫–ª—é—á–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.' if new_mode else 'üîä –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –≤—ã–∫–ª—é—á–µ–Ω.'}"
        
    except sqlite3.Error as e:
        log_error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–∞–Ω–¥–µ quiet: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quiet: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if conn:
            try:
                conn.close()
            except:
                pass

def cmd_sban(vk, event, args):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É"
    
    try:
        target = args[0]
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if is_admin(user_id):
            return "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            
        reason = ' '.join(args[1:]) if len(args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–µ—Å–µ–¥
        c.execute('SELECT chat_id FROM bot_chats WHERE is_active = 1')
        chats = c.fetchall()
        
        ban_time = datetime.now()
        banned_chats = []
        failed_chats = []
        
        for chat_id in chats:
            chat_id = chat_id[0]
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ—Å–µ–¥–µ
                members = vk.messages.getConversationMembers(peer_id=2000000000 + chat_id)
                member_ids = [member['member_id'] for member in members['items']]
                
                if user_id in member_ids:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ—Å–µ–¥—ã
                    vk.messages.removeChatUser(chat_id=chat_id, user_id=user_id)
                    banned_chats.append(chat_id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–∞–Ω–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    c.execute('''INSERT OR REPLACE INTO bans (user_id, chat_id, ban_time)
                                VALUES (?, ?, ?)''', (user_id, chat_id, ban_time))
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –±–µ—Å–µ–¥—ã
                    log_moderation(event.obj.message['from_id'], 'BAN', user_id, f"–ë–µ—Å–µ–¥–∞ {chat_id}: {reason}")
            except Exception as e:
                failed_chats.append(str(chat_id))
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {str(e)}")
                continue
        
        conn.commit()
        conn.close()
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        response = (f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']} {user_info['last_name']}) "
                   f"–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {len(banned_chats)} –±–µ—Å–µ–¥–∞—Ö\n"
                   f"–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        if failed_chats:
            response += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥–∞—Ö: {', '.join(failed_chats)}"
        
        return response
    
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ sban: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_sunban(vk, event, args):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
        c.execute('SELECT chat_id FROM bans WHERE user_id = ?', (user_id,))
        banned_chats = c.fetchall()
        
        if not banned_chats:
            conn.close()
            user_info = vk.users.get(user_ids=[user_id])[0]
            return f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –±–∞–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('DELETE FROM bans WHERE user_id = ?', (user_id,))
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'UNBAN', user_id, f"–†–∞–∑–±–∞–Ω –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö ({len(banned_chats)} –±–µ—Å–µ–¥)")
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö ({len(banned_chats)} –±–µ—Å–µ–¥)"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ sunban: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_addsenmoder(vk, event, args):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin(user_id):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
        current_role = c.fetchone()
        
        if current_role and current_role[0] == 'senior_moderator':
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        c.execute('''INSERT OR REPLACE INTO users 
                    (user_id, role, messages_count, level, xp, balance, reputation)
                    VALUES (?, 'senior_moderator', 
                    COALESCE((SELECT messages_count FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT level FROM users WHERE user_id = ?), 1),
                    COALESCE((SELECT xp FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT balance FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT reputation FROM users WHERE user_id = ?), 0))''',
                    (user_id, user_id, user_id, user_id, user_id, user_id))
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'ADD_SENIOR_MODERATOR', user_id)
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            admin_message = f"üëë –ù–æ–≤—ã–π —Å—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:\n@id{user_id} ({user_info['first_name']})"
            notify_admins(vk, admin_message, exclude_id=event.obj.message['from_id'])
        except:
            pass
        
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ addsenmoder: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_bug(vk, event, args):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞"
    
    try:
        bug_description = ' '.join(args)
        reporter_id = event.obj.message['from_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute('''INSERT INTO bug_reports (reporter_id, description, report_time, status)
                    VALUES (?, ?, ?, 'new')''', (reporter_id, bug_description, datetime.now()))
        
        bug_id = c.lastrowid
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–µ
        reporter_info = vk.users.get(user_ids=[reporter_id])[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ
        bug_message = (f"üêõ –ù–æ–≤—ã–π –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç #{bug_id}\n"
                      f"–û—Ç: @id{reporter_id} ({reporter_info['first_name']} {reporter_info['last_name']})\n"
                      f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                      f"–û–ø–∏—Å–∞–Ω–∏–µ: {bug_description}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        notify_admins(vk, bug_message)
        
        return f"‚úÖ –ë–∞–≥ —Ä–µ–ø–æ—Ä—Ç #{bug_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ bug: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def notify_admins(vk, message, exclude_id=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        c.execute('SELECT user_id FROM users WHERE role = "admin"')
        admins = c.fetchall()
        conn.close()
        
        for admin_id in admins:
            admin_id = admin_id[0]
            if admin_id != exclude_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID
                try:
                    vk.messages.send(
                        user_id=admin_id,
                        message=message,
                        random_id=get_random_id()
                    )
                except:
                    continue
        return None
    except:
        return None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

def cmd_stats_chat(vk, event):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã"""
    try:
        stats = get_chat_stats(vk, event.chat_id)
        if not stats:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ—Å–µ–¥—ã"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥—ã
        c.execute('SELECT quiet_mode, welcome_message, auto_warn, max_warnings FROM chat_settings WHERE chat_id = ?', 
                 (event.chat_id,))
        settings = c.fetchone() or (0, None, 0, 3)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ –≤ –±–µ—Å–µ–¥–µ
        c.execute('''SELECT COUNT(*) FROM warn_history 
                    WHERE user_id IN (
                        SELECT user_id FROM users 
                        WHERE warnings > 0
                    )''')
        warns_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤ –≤ –±–µ—Å–µ–¥–µ
        c.execute('SELECT COUNT(*) FROM bans WHERE chat_id = ?', (event.chat_id,))
        bans_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        c.execute('''SELECT COUNT(*) FROM message_history 
                    WHERE chat_id = ? AND timestamp > ?''', 
                    (event.chat_id, yesterday))
        messages_24h = c.fetchone()[0]
        
        conn.close()
        
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã:\n\n"
        message += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_members']}\n"
        message += f"üü¢ –û–Ω–ª–∞–π–Ω: {stats['online_count']}\n"
        message += f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admins_count']}\n"
        message += f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warns_count}\n"
        message += f"üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {bans_count}\n"
        message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: {messages_24h}\n\n"
        message += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥—ã:\n"
        message += f"ü§´ –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: {'–í–∫–ª—é—á–µ–Ω' if settings[0] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
        message += f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if settings[1] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
        message += f"‚ö†Ô∏è –ê–≤—Ç–æ–≤–∞—Ä–Ω: {'–í–∫–ª—é—á–µ–Ω' if settings[2] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
        message += f"‚ùó –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {settings[3]}"
        
        return message
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats_chat: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_settings(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ—Å–µ–¥—ã"""
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –∑–Ω–∞—á–µ–Ω–∏–µ"
    
    try:
        param = args[0].lower()
        value = ' '.join(args[1:]) if len(args) > 1 else None
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        if param == 'welcome':
            if not value:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            c.execute('''INSERT OR REPLACE INTO chat_settings (chat_id, welcome_message)
                        VALUES (?, ?)''', (event.chat_id, value))
            message = "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        elif param == 'autowarn':
            enabled = value == 'on'
            c.execute('''INSERT OR REPLACE INTO chat_settings (chat_id, auto_warn)
                        VALUES (?, ?)''', (event.chat_id, int(enabled)))
            message = f"‚úÖ –ê–≤—Ç–æ–≤–∞—Ä–Ω {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        
        elif param == 'maxwarns':
            try:
                max_warns = int(value)
                if max_warns < 1 or max_warns > 10:
                    return "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
                c.execute('''INSERT OR REPLACE INTO chat_settings (chat_id, max_warnings)
                            VALUES (?, ?)''', (event.chat_id, max_warns))
                message = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_warns}"
            except:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        
        elif param == 'antispam':
            if not value:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ on/off"
            enabled = value.lower() == 'on'
            c.execute('''INSERT OR REPLACE INTO chat_settings (chat_id, antispam_enabled)
                        VALUES (?, ?)''', (event.chat_id, int(enabled)))
            message = f"‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        
        else:
            return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: welcome, autowarn, maxwarns, antispam"
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'SETTINGS_CHANGE', event.chat_id, f"{param}: {value}")
        
        return message
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ settings: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_addadmin(vk, event, args):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if is_admin(user_id):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute('''INSERT OR REPLACE INTO users 
                    (user_id, role, messages_count, level, xp, balance, reputation)
                    VALUES (?, 'admin', 
                    COALESCE((SELECT messages_count FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT level FROM users WHERE user_id = ?), 1),
                    COALESCE((SELECT xp FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT balance FROM users WHERE user_id = ?), 0),
                    COALESCE((SELECT reputation FROM users WHERE user_id = ?), 0))''',
                    (user_id, user_id, user_id, user_id, user_id, user_id))
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'ADD_ADMIN', user_id)
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = f"üëë –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n@id{user_id} ({user_info['first_name']})"
        notify_admins(vk, admin_message, exclude_id=event.obj.message['from_id'])
        
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ addadmin: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_removeadmin(vk, event, args):
    """–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        if not is_admin(user_id):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        c.execute('SELECT COUNT(*) FROM users WHERE role = "admin"')
        admin_count = c.fetchone()[0]
        
        if admin_count <= 1:
            return "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        c.execute('''UPDATE users SET role = 'user' WHERE user_id = ?''', (user_id,))
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'REMOVE_ADMIN', user_id)
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:\n@id{user_id} ({user_info['first_name']})"
        notify_admins(vk, admin_message, exclude_id=event.obj.message['from_id'])
        
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id} ({user_info['first_name']}) —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ removeadmin: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_massban(vk, event, args):
    """–ú–∞—Å—Å–æ–≤—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args or len(args) < 2:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏—á–∏–Ω—É"
    
    try:
        targets = args[:-1]  # –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ - —ç—Ç–æ —Ü–µ–ª–∏
        reason = args[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –ø—Ä–∏—á–∏–Ω–∞
        
        banned_users = []
        failed_users = []
        
        for target in targets:
            try:
                user_id = extract_user_id(vk, target)
                if not user_id:
                    failed_users.append(target)
                    continue
                
                if is_admin(user_id):
                    failed_users.append(f"@id{user_id}")
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ban_result = cmd_sban(vk, event, [str(user_id), reason])
                if "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" in ban_result:
                    banned_users.append(f"@id{user_id}")
                else:
                    failed_users.append(f"@id{user_id}")
            except:
                failed_users.append(target)
        
        response = f"üö´ –ú–∞—Å—Å–æ–≤—ã–π –±–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        if banned_users:
            response += f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:\n{', '.join(banned_users)}"
        if failed_users:
            response += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:\n{', '.join(failed_users)}"
        
        return response
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ massban: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_unbanall(vk, event):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('SELECT DISTINCT user_id FROM bans WHERE chat_id = ?', (event.chat_id,))
        banned_users = c.fetchall()
        
        if not banned_users:
            return "‚úÖ –í –±–µ—Å–µ–¥–µ –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        unbanned_count = 0
        for user_id in banned_users:
            user_id = user_id[0]
            c.execute('DELETE FROM bans WHERE user_id = ? AND chat_id = ?', (user_id, event.chat_id))
            unbanned_count += 1
            
            log_moderation(event.obj.message['from_id'], 'UNBAN', user_id, "–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞–∑–±–∞–Ω")
        
        conn.commit()
        conn.close()
        
        return f"‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω–æ {unbanned_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ unbanall: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_clear_warns(vk, event, args):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        c.execute('SELECT warnings FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if not result or result[0] == 0:
            return "‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        c.execute('UPDATE users SET warnings = 0 WHERE user_id = ?', (user_id,))
        c.execute('DELETE FROM warn_history WHERE user_id = ?', (user_id,))
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'CLEAR_WARNS', user_id)
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        return f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{user_id} ({user_info['first_name']}) –æ—á–∏—â–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ clear_warns: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_reset_stats(vk, event, args):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    try:
        target = ' '.join(args)
        user_id = extract_user_id(vk, target)
        if not user_id:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_role = get_user_role(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute('''UPDATE users 
                    SET messages_count = 0,
                        level = 1,
                        xp = 0,
                        balance = 0,
                        reputation = 0
                    WHERE user_id = ?''', (user_id,))
        
        conn.commit()
        conn.close()
        
        log_moderation(event.obj.message['from_id'], 'RESET_STATS', user_id)
        
        user_info = vk.users.get(user_ids=[user_id])[0]
        return f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{user_id} ({user_info['first_name']}) —Å–±—Ä–æ—à–µ–Ω–∞"
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ reset_stats: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_admin_list(vk, event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute('''SELECT user_id, 
                           messages_count,
                           level,
                           last_activity
                    FROM users 
                    WHERE role = 'admin'
                    ORDER BY level DESC''')
        admins = c.fetchall()
        
        if not admins:
            return "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–µ—Ä–µ–∑ VK API
        admin_ids = [admin[0] for admin in admins]
        users_info = vk.users.get(user_ids=admin_ids)
        users_dict = {user['id']: user for user in users_info}
        
        message = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        
        for admin_id, messages, level, last_activity in admins:
            user = users_dict.get(admin_id, {'first_name': 'Unknown', 'last_name': 'User'})
            last_seen = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" if not last_activity else datetime.strptime(last_activity, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y %H:%M')
            
            message += f"üë§ @id{admin_id} ({user['first_name']} {user['last_name']})\n"
            message += f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages}\n"
            message += f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n"
        
        return message
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ admin_list: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}" 