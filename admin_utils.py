import sqlite3
from datetime import datetime
import json
import os
from logger import log_error, log_moderation
import re
from vk_api.utils import get_random_id

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result and result[0] == 'admin'

def cmd_filter(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–ª–æ–≤"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/filter add [—Å–ª–æ–≤–æ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n/filter remove [—Å–ª–æ–≤–æ] ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n/filter list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"
    
    action = args[0].lower()
    
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        c.execute('''CREATE TABLE IF NOT EXISTS word_filters
                    (chat_id INTEGER,
                     word TEXT,
                     added_by INTEGER,
                     added_time TIMESTAMP,
                     PRIMARY KEY (chat_id, word))''')
        
        if action == "add" and len(args) > 1:
            word = args[1].lower()
            c.execute('''INSERT OR REPLACE INTO word_filters 
                        (chat_id, word, added_by, added_time)
                        VALUES (?, ?, ?, ?)''',
                        (event.chat_id, word, event.obj.message['from_id'], datetime.now()))
            conn.commit()
            return f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä"
            
        elif action == "remove" and len(args) > 1:
            word = args[1].lower()
            c.execute('''DELETE FROM word_filters 
                        WHERE chat_id = ? AND word = ?''',
                        (event.chat_id, word))
            conn.commit()
            return f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞"
            
        elif action == "list":
            c.execute('''SELECT word FROM word_filters 
                        WHERE chat_id = ?
                        ORDER BY word''', (event.chat_id,))
            words = c.fetchall()
            
            if not words:
                return "üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç"
                
            message = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n\n"
            for word in words:
                message += f"‚Ä¢ {word[0]}\n"
            return message
            
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ filter: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if conn:
            conn.close()

def cmd_pin(vk, event, args):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    try:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'reply_message' in event.obj.message:
            conversation_message_id = event.obj.message['reply_message']['conversation_message_id']
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            vk.messages.pin(
                peer_id=2000000000 + event.chat_id,
                conversation_message_id=conversation_message_id
            )
            
            return "üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ"
        else:
            return "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å"
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ pin: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cmd_export(vk, event, args):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–µ—Å–µ–¥—ã"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ—Å–µ–¥—ã
        c.execute('''SELECT users.user_id, users.messages_count, users.level, 
                           users.balance, users.reputation, users.warnings
                    FROM users
                    JOIN message_history ON users.user_id = message_history.user_id
                    WHERE message_history.chat_id = ?
                    GROUP BY users.user_id''', (event.chat_id,))
        
        users_data = c.fetchall()
        
        if not users_data:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–µ—Ä–µ–∑ VK API
        user_ids = [user[0] for user in users_data]
        users_info = vk.users.get(user_ids=user_ids)
        users_dict = {user['id']: user for user in users_info}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            'chat_id': event.chat_id,
            'export_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'users': []
        }
        
        for user_data in users_data:
            user_id = user_data[0]
            user_info = users_dict.get(user_id, {})
            
            export_data['users'].append({
                'user_id': user_id,
                'name': f"{user_info.get('first_name', 'Unknown')} {user_info.get('last_name', 'User')}",
                'messages': user_data[1],
                'level': user_data[2],
                'balance': user_data[3],
                'reputation': user_data[4],
                'warnings': user_data[5]
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"chat_{event.chat_id}_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
            
        return f"üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}"
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ export: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if conn:
            conn.close()

def cmd_welcome(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return ("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/welcome set [—Ç–µ–∫—Å—Ç] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                "/welcome clear ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                "/welcome show ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                "{name} ‚Äî –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "{chat} ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã\n"
                "{members} ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    action = args[0].lower()
    
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        if action == "set":
            if len(args) < 2:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
                
            welcome_text = ' '.join(args[1:])
            c.execute('''UPDATE chat_settings 
                        SET welcome_message = ?
                        WHERE chat_id = ?''', (welcome_text, event.chat_id))
            
            if c.rowcount == 0:
                c.execute('''INSERT INTO chat_settings 
                            (chat_id, welcome_message)
                            VALUES (?, ?)''', (event.chat_id, welcome_text))
            
            conn.commit()
            return "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
        elif action == "clear":
            c.execute('''UPDATE chat_settings 
                        SET welcome_message = NULL
                        WHERE chat_id = ?''', (event.chat_id,))
            conn.commit()
            return "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"
            
        elif action == "show":
            c.execute('''SELECT welcome_message 
                        FROM chat_settings 
                        WHERE chat_id = ?''', (event.chat_id,))
            result = c.fetchone()
            
            if not result or not result[0]:
                return "üìù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                
            return f"üìù –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n{result[0]}"
            
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ welcome: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if conn:
            conn.close()

def cmd_backup(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –±–µ—Å–µ–¥—ã"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return ("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/backup create ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
                "/backup list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π\n"
                "/backup restore [ID] ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏")
    
    action = args[0].lower()
    backup_dir = "backups"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
            
        if action == "create":
            conn = sqlite3.connect('bot.db')
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã
            c.execute('''SELECT * FROM chat_settings WHERE chat_id = ?''', (event.chat_id,))
            settings = c.fetchone()
            
            c.execute('''SELECT * FROM word_filters WHERE chat_id = ?''', (event.chat_id,))
            filters = c.fetchall()
            
            backup_data = {
                'chat_id': event.chat_id,
                'backup_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'settings': settings,
                'filters': filters
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
            backup_file = f"{backup_dir}/chat_{event.chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
            return f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {os.path.basename(backup_file)}"
            
        elif action == "list":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã
            backup_files = [f for f in os.listdir(backup_dir) 
                          if f.startswith(f"chat_{event.chat_id}_")]
            
            if not backup_files:
                return "üìù –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
            message = "üìù –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:\n\n"
            for i, file in enumerate(sorted(backup_files, reverse=True)):
                backup_date = file.split('_')[-1].replace('.json', '')
                message += f"{i+1}. {backup_date}\n"
            return message
            
        elif action == "restore" and len(args) > 1:
            try:
                backup_index = int(args[1]) - 1
                backup_files = sorted([f for f in os.listdir(backup_dir) 
                                    if f.startswith(f"chat_{event.chat_id}_")],
                                    reverse=True)
                
                if not backup_files:
                    return "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    
                if backup_index < 0 or backup_index >= len(backup_files):
                    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
                    
                backup_file = os.path.join(backup_dir, backup_files[backup_index])
                
                with open(backup_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                conn = sqlite3.connect('bot.db')
                c = conn.cursor()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if backup_data.get('settings'):
                    c.execute('''INSERT OR REPLACE INTO chat_settings 
                                (chat_id, quiet_mode, welcome_message, auto_warn, max_warnings)
                                VALUES (?, ?, ?, ?, ?)''', backup_data['settings'])
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if backup_data.get('filters'):
                    c.execute('DELETE FROM word_filters WHERE chat_id = ?', (event.chat_id,))
                    c.executemany('''INSERT INTO word_filters 
                                    (chat_id, word, added_by, added_time)
                                    VALUES (?, ?, ?, ?)''', backup_data['filters'])
                
                conn.commit()
                return "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
                
            except ValueError:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ backup: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if 'conn' in locals():
            conn.close()

def cmd_automod(vk, event, args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
    if not is_admin(event.obj.message['from_id']):
        return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
    if not args:
        return ("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/automod status ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "/automod spam [on/off] ‚Äî —Ñ–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞\n"
                "/automod caps [on/off] ‚Äî —Ñ–∏–ª—å—Ç—Ä –∫–∞–ø—Å–∞\n"
                "/automod links [on/off] ‚Äî —Ñ–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫\n"
                "/automod warns [—á–∏—Å–ª–æ] ‚Äî –º–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
                "/automod action [warn/kick/ban] ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏")
    
    action = args[0].lower()
    
    try:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        c.execute('''CREATE TABLE IF NOT EXISTS automod_settings
                    (chat_id INTEGER PRIMARY KEY,
                     spam_filter INTEGER DEFAULT 0,
                     caps_filter INTEGER DEFAULT 0,
                     links_filter INTEGER DEFAULT 0,
                     max_warns INTEGER DEFAULT 3,
                     action TEXT DEFAULT 'warn')''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        c.execute('''INSERT OR IGNORE INTO automod_settings (chat_id)
                    VALUES (?)''', (event.chat_id,))
        
        if action == "status":
            c.execute('''SELECT spam_filter, caps_filter, links_filter,
                               max_warns, action
                        FROM automod_settings
                        WHERE chat_id = ?''', (event.chat_id,))
            settings = c.fetchone()
            
            return (f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
                   f"üö´ –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞: {'–í–∫–ª—é—á–µ–Ω' if settings[0] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
                   f"üî† –§–∏–ª—å—Ç—Ä –∫–∞–ø—Å–∞: {'–í–∫–ª—é—á–µ–Ω' if settings[1] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
                   f"üîó –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫: {'–í–∫–ª—é—á–µ–Ω' if settings[2] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
                   f"‚ö†Ô∏è –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {settings[3]}\n"
                   f"üëÆ –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏: {settings[4]}")
        
        elif action in ["spam", "caps", "links"] and len(args) > 1:
            value = 1 if args[1].lower() == "on" else 0
            column = f"{action}_filter"
            
            c.execute(f'''UPDATE automod_settings 
                         SET {column} = ?
                         WHERE chat_id = ?''', (value, event.chat_id))
            
            conn.commit()
            return f"‚úÖ –§–∏–ª—å—Ç—Ä {action} {'–≤–∫–ª—é—á–µ–Ω' if value else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        
        elif action == "warns" and len(args) > 1:
            try:
                max_warns = int(args[1])
                if max_warns < 1 or max_warns > 10:
                    return "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
                    
                c.execute('''UPDATE automod_settings 
                            SET max_warns = ?
                            WHERE chat_id = ?''', (max_warns, event.chat_id))
                
                conn.commit()
                return f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {max_warns}"
            except ValueError:
                return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        
        elif action == "action" and len(args) > 1:
            new_action = args[1].lower()
            if new_action not in ["warn", "kick", "ban"]:
                return "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: warn, kick, ban"
                
            c.execute('''UPDATE automod_settings 
                        SET action = ?
                        WHERE chat_id = ?''', (new_action, event.chat_id))
            
            conn.commit()
            return f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏: {new_action}"
        
        else:
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ automod: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if conn:
            conn.close() 